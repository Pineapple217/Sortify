// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, password_hash
) VALUES (
    $1, $2
) RETURNING id, username, password_hash, created_at, updated_at
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthInfo = `-- name: GetAuthInfo :one
SELECT u.username, u.id,
    s.id, s.spotify_access_token, s.spotify_refresh_token, s.spotify_expiry
FROM users u
JOIN sessions s on s.user_id = u.id
WHERE s.token = $1
AND expires_at > now()
`

type GetAuthInfoRow struct {
	Username            string
	ID                  int64
	ID_2                int64
	SpotifyAccessToken  pgtype.Text
	SpotifyRefreshToken pgtype.Text
	SpotifyExpiry       pgtype.Timestamptz
}

func (q *Queries) GetAuthInfo(ctx context.Context, token string) (GetAuthInfoRow, error) {
	row := q.db.QueryRow(ctx, getAuthInfo, token)
	var i GetAuthInfoRow
	err := row.Scan(
		&i.Username,
		&i.ID,
		&i.ID_2,
		&i.SpotifyAccessToken,
		&i.SpotifyRefreshToken,
		&i.SpotifyExpiry,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password_hash, created_at, updated_at FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
