// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists (
    title, user_id
) VALUES (
    $1, $2
) RETURNING id, title, user_id, created_at, updated_at, deleted_at
`

type CreatePlaylistParams struct {
	Title  string
	UserID int64
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRow(ctx, createPlaylist, arg.Title, arg.UserID)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    user_id, token, expires_at, ip_address, user_agent
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, token, ip_address, user_agent, expires_at, last_login_at, created_at, spotify_access_token, spotify_refresh_token, spotify_expiry
`

type CreateSessionParams struct {
	UserID    int64
	Token     string
	ExpiresAt pgtype.Timestamptz
	IpAddress pgtype.Text
	UserAgent pgtype.Text
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.IpAddress,
		&i.UserAgent,
		&i.ExpiresAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.SpotifyAccessToken,
		&i.SpotifyRefreshToken,
		&i.SpotifyExpiry,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, password_hash
) VALUES (
    $1, $2
) RETURNING id, username, password_hash, created_at, updated_at
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOldSessions = `-- name: DeleteOldSessions :exec
DELETE FROM sessions
WHERE expires_at < now()
`

func (q *Queries) DeleteOldSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteOldSessions)
	return err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM sessions
WHERE token = $1
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteSessionByToken, token)
	return err
}

const getAuthInfo = `-- name: GetAuthInfo :one
SELECT u.username, u.id,
    s.id, s.spotify_access_token, s.spotify_refresh_token, s.spotify_expiry
FROM users u
JOIN sessions s on s.user_id = u.id
WHERE s.token = $1
AND expires_at > now()
`

type GetAuthInfoRow struct {
	Username            string
	ID                  int64
	ID_2                int64
	SpotifyAccessToken  pgtype.Text
	SpotifyRefreshToken pgtype.Text
	SpotifyExpiry       pgtype.Timestamptz
}

func (q *Queries) GetAuthInfo(ctx context.Context, token string) (GetAuthInfoRow, error) {
	row := q.db.QueryRow(ctx, getAuthInfo, token)
	var i GetAuthInfoRow
	err := row.Scan(
		&i.Username,
		&i.ID,
		&i.ID_2,
		&i.SpotifyAccessToken,
		&i.SpotifyRefreshToken,
		&i.SpotifyExpiry,
	)
	return i, err
}

const getPlaylist = `-- name: GetPlaylist :one
select id, title, user_id, created_at, updated_at, deleted_at
from playlists
where id = $1
`

func (q *Queries) GetPlaylist(ctx context.Context, id int64) (Playlist, error) {
	row := q.db.QueryRow(ctx, getPlaylist, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPlaylistTracks = `-- name: GetPlaylistTracks :many
select t.id, t.title, t.artist, t.img_small_url, t.img_medium_url, t.img_large_url, t.release_date, t.spotify_id, t.duration_ms, t.preview_url, t.popularity, t.created_at, t.updated_at, t.deleted_at from playlists p
join playlist_track pt on pt.playlist_id = p.id
join tracks t on pt.track_id = t.id
where p.id = $1
limit $2
offset $3
`

type GetPlaylistTracksParams struct {
	ID     int64
	Limit  int32
	Offset int32
}

func (q *Queries) GetPlaylistTracks(ctx context.Context, arg GetPlaylistTracksParams) ([]Track, error) {
	rows, err := q.db.Query(ctx, getPlaylistTracks, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artist,
			&i.ImgSmallUrl,
			&i.ImgMediumUrl,
			&i.ImgLargeUrl,
			&i.ReleaseDate,
			&i.SpotifyID,
			&i.DurationMs,
			&i.PreviewUrl,
			&i.Popularity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylistsByUser = `-- name: GetPlaylistsByUser :many
SELECT id, title, user_id, created_at, updated_at, deleted_at
from playlists
where user_id = $1
order by updated_at desc
`

func (q *Queries) GetPlaylistsByUser(ctx context.Context, userID int64) ([]Playlist, error) {
	rows, err := q.db.Query(ctx, getPlaylistsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, token, ip_address, user_agent, expires_at, last_login_at, created_at, spotify_access_token, spotify_refresh_token, spotify_expiry FROM sessions
WHERE token = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.IpAddress,
		&i.UserAgent,
		&i.ExpiresAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.SpotifyAccessToken,
		&i.SpotifyRefreshToken,
		&i.SpotifyExpiry,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password_hash, created_at, updated_at FROM users
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const sessionAddSotify = `-- name: SessionAddSotify :exec
UPDATE sessions
    set
    spotify_access_token = $2,
    spotify_refresh_token = $3,
    spotify_expiry = $4
WHERE token = $1
`

type SessionAddSotifyParams struct {
	Token               string
	SpotifyAccessToken  pgtype.Text
	SpotifyRefreshToken pgtype.Text
	SpotifyExpiry       pgtype.Timestamptz
}

func (q *Queries) SessionAddSotify(ctx context.Context, arg SessionAddSotifyParams) error {
	_, err := q.db.Exec(ctx, sessionAddSotify,
		arg.Token,
		arg.SpotifyAccessToken,
		arg.SpotifyRefreshToken,
		arg.SpotifyExpiry,
	)
	return err
}

const sessionUpdateSotify = `-- name: SessionUpdateSotify :exec
UPDATE sessions
    set
    spotify_access_token = $2,
    spotify_refresh_token = $3,
    spotify_expiry = $4
WHERE id = $1
`

type SessionUpdateSotifyParams struct {
	ID                  int64
	SpotifyAccessToken  pgtype.Text
	SpotifyRefreshToken pgtype.Text
	SpotifyExpiry       pgtype.Timestamptz
}

func (q *Queries) SessionUpdateSotify(ctx context.Context, arg SessionUpdateSotifyParams) error {
	_, err := q.db.Exec(ctx, sessionUpdateSotify,
		arg.ID,
		arg.SpotifyAccessToken,
		arg.SpotifyRefreshToken,
		arg.SpotifyExpiry,
	)
	return err
}
