// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: playlists.sql

package database

import (
	"context"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists (
    title, user_id
) VALUES (
    $1, $2
) RETURNING id, title, user_id, created_at, updated_at, deleted_at
`

type CreatePlaylistParams struct {
	Title  string
	UserID int64
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRow(ctx, createPlaylist, arg.Title, arg.UserID)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPlaylist = `-- name: GetPlaylist :one
select id, title, user_id, created_at, updated_at, deleted_at
from playlists
where id = $1
`

func (q *Queries) GetPlaylist(ctx context.Context, id int64) (Playlist, error) {
	row := q.db.QueryRow(ctx, getPlaylist, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPlaylistTracks = `-- name: GetPlaylistTracks :many
select t.id, t.title, t.artist, t.img_small_url, t.img_medium_url, t.img_large_url, t.release_date, t.spotify_id, t.duration_ms, t.preview_url, t.popularity, t.created_at, t.updated_at, t.deleted_at from playlists p
join playlist_track pt on pt.playlist_id = p.id
join tracks t on pt.track_id = t.id
where p.id = $1
limit $2
offset $3
`

type GetPlaylistTracksParams struct {
	ID     int64
	Limit  int32
	Offset int32
}

func (q *Queries) GetPlaylistTracks(ctx context.Context, arg GetPlaylistTracksParams) ([]Track, error) {
	rows, err := q.db.Query(ctx, getPlaylistTracks, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artist,
			&i.ImgSmallUrl,
			&i.ImgMediumUrl,
			&i.ImgLargeUrl,
			&i.ReleaseDate,
			&i.SpotifyID,
			&i.DurationMs,
			&i.PreviewUrl,
			&i.Popularity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylistsByUser = `-- name: GetPlaylistsByUser :many
SELECT id, title, user_id, created_at, updated_at, deleted_at
from playlists
where user_id = $1 and deleted_at is null
order by updated_at desc
`

func (q *Queries) GetPlaylistsByUser(ctx context.Context, userID int64) ([]Playlist, error) {
	rows, err := q.db.Query(ctx, getPlaylistsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
