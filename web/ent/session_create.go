// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/Sortify/web/ent/session"
	"github.com/Pineapple217/Sortify/web/ent/user"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetToken sets the "token" field.
func (sc *SessionCreate) SetToken(s string) *SessionCreate {
	sc.mutation.SetToken(s)
	return sc
}

// SetIPAddress sets the "ip_address" field.
func (sc *SessionCreate) SetIPAddress(s string) *SessionCreate {
	sc.mutation.SetIPAddress(s)
	return sc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (sc *SessionCreate) SetNillableIPAddress(s *string) *SessionCreate {
	if s != nil {
		sc.SetIPAddress(*s)
	}
	return sc
}

// SetUserAgent sets the "user_agent" field.
func (sc *SessionCreate) SetUserAgent(s string) *SessionCreate {
	sc.mutation.SetUserAgent(s)
	return sc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (sc *SessionCreate) SetNillableUserAgent(s *string) *SessionCreate {
	if s != nil {
		sc.SetUserAgent(*s)
	}
	return sc
}

// SetExpiresAt sets the "expires_at" field.
func (sc *SessionCreate) SetExpiresAt(t time.Time) *SessionCreate {
	sc.mutation.SetExpiresAt(t)
	return sc
}

// SetLastLoginAt sets the "last_login_at" field.
func (sc *SessionCreate) SetLastLoginAt(t time.Time) *SessionCreate {
	sc.mutation.SetLastLoginAt(t)
	return sc
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableLastLoginAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetLastLoginAt(*t)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *SessionCreate) SetCreatedAt(t time.Time) *SessionCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SessionCreate) SetNillableCreatedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetSpotifyAccessToken sets the "spotify_access_token" field.
func (sc *SessionCreate) SetSpotifyAccessToken(s string) *SessionCreate {
	sc.mutation.SetSpotifyAccessToken(s)
	return sc
}

// SetNillableSpotifyAccessToken sets the "spotify_access_token" field if the given value is not nil.
func (sc *SessionCreate) SetNillableSpotifyAccessToken(s *string) *SessionCreate {
	if s != nil {
		sc.SetSpotifyAccessToken(*s)
	}
	return sc
}

// SetSpotifyRefreshToken sets the "spotify_refresh_token" field.
func (sc *SessionCreate) SetSpotifyRefreshToken(s string) *SessionCreate {
	sc.mutation.SetSpotifyRefreshToken(s)
	return sc
}

// SetNillableSpotifyRefreshToken sets the "spotify_refresh_token" field if the given value is not nil.
func (sc *SessionCreate) SetNillableSpotifyRefreshToken(s *string) *SessionCreate {
	if s != nil {
		sc.SetSpotifyRefreshToken(*s)
	}
	return sc
}

// SetSpotifyExpiry sets the "spotify_expiry" field.
func (sc *SessionCreate) SetSpotifyExpiry(t time.Time) *SessionCreate {
	sc.mutation.SetSpotifyExpiry(t)
	return sc
}

// SetNillableSpotifyExpiry sets the "spotify_expiry" field if the given value is not nil.
func (sc *SessionCreate) SetNillableSpotifyExpiry(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetSpotifyExpiry(*t)
	}
	return sc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (sc *SessionCreate) SetUserID(id int) *SessionCreate {
	sc.mutation.SetUserID(id)
	return sc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (sc *SessionCreate) SetNillableUserID(id *int) *SessionCreate {
	if id != nil {
		sc = sc.SetUserID(*id)
	}
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *SessionCreate) SetUser(u *User) *SessionCreate {
	return sc.SetUserID(u.ID)
}

// Mutation returns the SessionMutation object of the builder.
func (sc *SessionCreate) Mutation() *SessionMutation {
	return sc.mutation
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SessionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SessionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SessionCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := session.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SessionCreate) check() error {
	if _, ok := sc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "Session.token"`)}
	}
	if _, ok := sc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "Session.expires_at"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Session.created_at"`)}
	}
	return nil
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		_node = &Session{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(session.Table, sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.Token(); ok {
		_spec.SetField(session.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := sc.mutation.IPAddress(); ok {
		_spec.SetField(session.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = &value
	}
	if value, ok := sc.mutation.UserAgent(); ok {
		_spec.SetField(session.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = &value
	}
	if value, ok := sc.mutation.ExpiresAt(); ok {
		_spec.SetField(session.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := sc.mutation.LastLoginAt(); ok {
		_spec.SetField(session.FieldLastLoginAt, field.TypeTime, value)
		_node.LastLoginAt = &value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(session.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.SpotifyAccessToken(); ok {
		_spec.SetField(session.FieldSpotifyAccessToken, field.TypeString, value)
		_node.SpotifyAccessToken = &value
	}
	if value, ok := sc.mutation.SpotifyRefreshToken(); ok {
		_spec.SetField(session.FieldSpotifyRefreshToken, field.TypeString, value)
		_node.SpotifyRefreshToken = &value
	}
	if value, ok := sc.mutation.SpotifyExpiry(); ok {
		_spec.SetField(session.FieldSpotifyExpiry, field.TypeTime, value)
		_node.SpotifyExpiry = &value
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   session.UserTable,
			Columns: []string{session.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_sessions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Session.Create().
//		SetToken(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SessionUpsert) {
//			SetToken(v+v).
//		}).
//		Exec(ctx)
func (sc *SessionCreate) OnConflict(opts ...sql.ConflictOption) *SessionUpsertOne {
	sc.conflict = opts
	return &SessionUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Session.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SessionCreate) OnConflictColumns(columns ...string) *SessionUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SessionUpsertOne{
		create: sc,
	}
}

type (
	// SessionUpsertOne is the builder for "upsert"-ing
	//  one Session node.
	SessionUpsertOne struct {
		create *SessionCreate
	}

	// SessionUpsert is the "OnConflict" setter.
	SessionUpsert struct {
		*sql.UpdateSet
	}
)

// SetToken sets the "token" field.
func (u *SessionUpsert) SetToken(v string) *SessionUpsert {
	u.Set(session.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SessionUpsert) UpdateToken() *SessionUpsert {
	u.SetExcluded(session.FieldToken)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *SessionUpsert) SetIPAddress(v string) *SessionUpsert {
	u.Set(session.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *SessionUpsert) UpdateIPAddress() *SessionUpsert {
	u.SetExcluded(session.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *SessionUpsert) ClearIPAddress() *SessionUpsert {
	u.SetNull(session.FieldIPAddress)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *SessionUpsert) SetUserAgent(v string) *SessionUpsert {
	u.Set(session.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *SessionUpsert) UpdateUserAgent() *SessionUpsert {
	u.SetExcluded(session.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *SessionUpsert) ClearUserAgent() *SessionUpsert {
	u.SetNull(session.FieldUserAgent)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *SessionUpsert) SetExpiresAt(v time.Time) *SessionUpsert {
	u.Set(session.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *SessionUpsert) UpdateExpiresAt() *SessionUpsert {
	u.SetExcluded(session.FieldExpiresAt)
	return u
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *SessionUpsert) SetLastLoginAt(v time.Time) *SessionUpsert {
	u.Set(session.FieldLastLoginAt, v)
	return u
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *SessionUpsert) UpdateLastLoginAt() *SessionUpsert {
	u.SetExcluded(session.FieldLastLoginAt)
	return u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *SessionUpsert) ClearLastLoginAt() *SessionUpsert {
	u.SetNull(session.FieldLastLoginAt)
	return u
}

// SetSpotifyAccessToken sets the "spotify_access_token" field.
func (u *SessionUpsert) SetSpotifyAccessToken(v string) *SessionUpsert {
	u.Set(session.FieldSpotifyAccessToken, v)
	return u
}

// UpdateSpotifyAccessToken sets the "spotify_access_token" field to the value that was provided on create.
func (u *SessionUpsert) UpdateSpotifyAccessToken() *SessionUpsert {
	u.SetExcluded(session.FieldSpotifyAccessToken)
	return u
}

// ClearSpotifyAccessToken clears the value of the "spotify_access_token" field.
func (u *SessionUpsert) ClearSpotifyAccessToken() *SessionUpsert {
	u.SetNull(session.FieldSpotifyAccessToken)
	return u
}

// SetSpotifyRefreshToken sets the "spotify_refresh_token" field.
func (u *SessionUpsert) SetSpotifyRefreshToken(v string) *SessionUpsert {
	u.Set(session.FieldSpotifyRefreshToken, v)
	return u
}

// UpdateSpotifyRefreshToken sets the "spotify_refresh_token" field to the value that was provided on create.
func (u *SessionUpsert) UpdateSpotifyRefreshToken() *SessionUpsert {
	u.SetExcluded(session.FieldSpotifyRefreshToken)
	return u
}

// ClearSpotifyRefreshToken clears the value of the "spotify_refresh_token" field.
func (u *SessionUpsert) ClearSpotifyRefreshToken() *SessionUpsert {
	u.SetNull(session.FieldSpotifyRefreshToken)
	return u
}

// SetSpotifyExpiry sets the "spotify_expiry" field.
func (u *SessionUpsert) SetSpotifyExpiry(v time.Time) *SessionUpsert {
	u.Set(session.FieldSpotifyExpiry, v)
	return u
}

// UpdateSpotifyExpiry sets the "spotify_expiry" field to the value that was provided on create.
func (u *SessionUpsert) UpdateSpotifyExpiry() *SessionUpsert {
	u.SetExcluded(session.FieldSpotifyExpiry)
	return u
}

// ClearSpotifyExpiry clears the value of the "spotify_expiry" field.
func (u *SessionUpsert) ClearSpotifyExpiry() *SessionUpsert {
	u.SetNull(session.FieldSpotifyExpiry)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Session.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SessionUpsertOne) UpdateNewValues() *SessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(session.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Session.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SessionUpsertOne) Ignore() *SessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SessionUpsertOne) DoNothing() *SessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SessionCreate.OnConflict
// documentation for more info.
func (u *SessionUpsertOne) Update(set func(*SessionUpsert)) *SessionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetToken sets the "token" field.
func (u *SessionUpsertOne) SetToken(v string) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateToken() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateToken()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *SessionUpsertOne) SetIPAddress(v string) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateIPAddress() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *SessionUpsertOne) ClearIPAddress() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *SessionUpsertOne) SetUserAgent(v string) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateUserAgent() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *SessionUpsertOne) ClearUserAgent() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearUserAgent()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *SessionUpsertOne) SetExpiresAt(v time.Time) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateExpiresAt() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *SessionUpsertOne) SetLastLoginAt(v time.Time) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetLastLoginAt(v)
	})
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateLastLoginAt() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateLastLoginAt()
	})
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *SessionUpsertOne) ClearLastLoginAt() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearLastLoginAt()
	})
}

// SetSpotifyAccessToken sets the "spotify_access_token" field.
func (u *SessionUpsertOne) SetSpotifyAccessToken(v string) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetSpotifyAccessToken(v)
	})
}

// UpdateSpotifyAccessToken sets the "spotify_access_token" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateSpotifyAccessToken() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateSpotifyAccessToken()
	})
}

// ClearSpotifyAccessToken clears the value of the "spotify_access_token" field.
func (u *SessionUpsertOne) ClearSpotifyAccessToken() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearSpotifyAccessToken()
	})
}

// SetSpotifyRefreshToken sets the "spotify_refresh_token" field.
func (u *SessionUpsertOne) SetSpotifyRefreshToken(v string) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetSpotifyRefreshToken(v)
	})
}

// UpdateSpotifyRefreshToken sets the "spotify_refresh_token" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateSpotifyRefreshToken() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateSpotifyRefreshToken()
	})
}

// ClearSpotifyRefreshToken clears the value of the "spotify_refresh_token" field.
func (u *SessionUpsertOne) ClearSpotifyRefreshToken() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearSpotifyRefreshToken()
	})
}

// SetSpotifyExpiry sets the "spotify_expiry" field.
func (u *SessionUpsertOne) SetSpotifyExpiry(v time.Time) *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.SetSpotifyExpiry(v)
	})
}

// UpdateSpotifyExpiry sets the "spotify_expiry" field to the value that was provided on create.
func (u *SessionUpsertOne) UpdateSpotifyExpiry() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateSpotifyExpiry()
	})
}

// ClearSpotifyExpiry clears the value of the "spotify_expiry" field.
func (u *SessionUpsertOne) ClearSpotifyExpiry() *SessionUpsertOne {
	return u.Update(func(s *SessionUpsert) {
		s.ClearSpotifyExpiry()
	})
}

// Exec executes the query.
func (u *SessionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SessionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SessionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SessionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SessionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SessionCreateBulk is the builder for creating many Session entities in bulk.
type SessionCreateBulk struct {
	config
	err      error
	builders []*SessionCreate
	conflict []sql.ConflictOption
}

// Save creates the Session entities in the database.
func (scb *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Session, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SessionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SessionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Session.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SessionUpsert) {
//			SetToken(v+v).
//		}).
//		Exec(ctx)
func (scb *SessionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SessionUpsertBulk {
	scb.conflict = opts
	return &SessionUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Session.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SessionCreateBulk) OnConflictColumns(columns ...string) *SessionUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SessionUpsertBulk{
		create: scb,
	}
}

// SessionUpsertBulk is the builder for "upsert"-ing
// a bulk of Session nodes.
type SessionUpsertBulk struct {
	create *SessionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Session.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SessionUpsertBulk) UpdateNewValues() *SessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(session.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Session.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SessionUpsertBulk) Ignore() *SessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SessionUpsertBulk) DoNothing() *SessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SessionCreateBulk.OnConflict
// documentation for more info.
func (u *SessionUpsertBulk) Update(set func(*SessionUpsert)) *SessionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SessionUpsert{UpdateSet: update})
	}))
	return u
}

// SetToken sets the "token" field.
func (u *SessionUpsertBulk) SetToken(v string) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateToken() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateToken()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *SessionUpsertBulk) SetIPAddress(v string) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateIPAddress() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *SessionUpsertBulk) ClearIPAddress() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearIPAddress()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *SessionUpsertBulk) SetUserAgent(v string) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateUserAgent() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *SessionUpsertBulk) ClearUserAgent() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearUserAgent()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *SessionUpsertBulk) SetExpiresAt(v time.Time) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateExpiresAt() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *SessionUpsertBulk) SetLastLoginAt(v time.Time) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetLastLoginAt(v)
	})
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateLastLoginAt() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateLastLoginAt()
	})
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *SessionUpsertBulk) ClearLastLoginAt() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearLastLoginAt()
	})
}

// SetSpotifyAccessToken sets the "spotify_access_token" field.
func (u *SessionUpsertBulk) SetSpotifyAccessToken(v string) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetSpotifyAccessToken(v)
	})
}

// UpdateSpotifyAccessToken sets the "spotify_access_token" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateSpotifyAccessToken() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateSpotifyAccessToken()
	})
}

// ClearSpotifyAccessToken clears the value of the "spotify_access_token" field.
func (u *SessionUpsertBulk) ClearSpotifyAccessToken() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearSpotifyAccessToken()
	})
}

// SetSpotifyRefreshToken sets the "spotify_refresh_token" field.
func (u *SessionUpsertBulk) SetSpotifyRefreshToken(v string) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetSpotifyRefreshToken(v)
	})
}

// UpdateSpotifyRefreshToken sets the "spotify_refresh_token" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateSpotifyRefreshToken() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateSpotifyRefreshToken()
	})
}

// ClearSpotifyRefreshToken clears the value of the "spotify_refresh_token" field.
func (u *SessionUpsertBulk) ClearSpotifyRefreshToken() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearSpotifyRefreshToken()
	})
}

// SetSpotifyExpiry sets the "spotify_expiry" field.
func (u *SessionUpsertBulk) SetSpotifyExpiry(v time.Time) *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.SetSpotifyExpiry(v)
	})
}

// UpdateSpotifyExpiry sets the "spotify_expiry" field to the value that was provided on create.
func (u *SessionUpsertBulk) UpdateSpotifyExpiry() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.UpdateSpotifyExpiry()
	})
}

// ClearSpotifyExpiry clears the value of the "spotify_expiry" field.
func (u *SessionUpsertBulk) ClearSpotifyExpiry() *SessionUpsertBulk {
	return u.Update(func(s *SessionUpsert) {
		s.ClearSpotifyExpiry()
	})
}

// Exec executes the query.
func (u *SessionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SessionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SessionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SessionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
