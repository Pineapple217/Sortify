// Code generated by ent, DO NOT EDIT.

package track

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the track type in the database.
	Label = "track"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldArtist holds the string denoting the artist field in the database.
	FieldArtist = "artist"
	// FieldImgSmallURL holds the string denoting the img_small_url field in the database.
	FieldImgSmallURL = "img_small_url"
	// FieldImgMediumURL holds the string denoting the img_medium_url field in the database.
	FieldImgMediumURL = "img_medium_url"
	// FieldImgLargeURL holds the string denoting the img_large_url field in the database.
	FieldImgLargeURL = "img_large_url"
	// FieldReleaseDate holds the string denoting the release_date field in the database.
	FieldReleaseDate = "release_date"
	// FieldSpotifyID holds the string denoting the spotify_id field in the database.
	FieldSpotifyID = "spotify_id"
	// FieldDurationMs holds the string denoting the duration_ms field in the database.
	FieldDurationMs = "duration_ms"
	// FieldPreviewURL holds the string denoting the preview_url field in the database.
	FieldPreviewURL = "preview_url"
	// FieldPopularity holds the string denoting the popularity field in the database.
	FieldPopularity = "popularity"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgePlaylists holds the string denoting the playlists edge name in mutations.
	EdgePlaylists = "playlists"
	// Table holds the table name of the track in the database.
	Table = "tracks"
	// PlaylistsTable is the table that holds the playlists relation/edge. The primary key declared below.
	PlaylistsTable = "playlist_tracks"
	// PlaylistsInverseTable is the table name for the Playlist entity.
	// It exists in this package in order to avoid circular dependency with the "playlist" package.
	PlaylistsInverseTable = "playlists"
)

// Columns holds all SQL columns for track fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldArtist,
	FieldImgSmallURL,
	FieldImgMediumURL,
	FieldImgLargeURL,
	FieldReleaseDate,
	FieldSpotifyID,
	FieldDurationMs,
	FieldPreviewURL,
	FieldPopularity,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

var (
	// PlaylistsPrimaryKey and PlaylistsColumn2 are the table columns denoting the
	// primary key for the playlists relation (M2M).
	PlaylistsPrimaryKey = []string{"playlist_id", "track_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DurationMsValidator is a validator for the "duration_ms" field. It is called by the builders before save.
	DurationMsValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Track queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByArtist orders the results by the artist field.
func ByArtist(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtist, opts...).ToFunc()
}

// ByImgSmallURL orders the results by the img_small_url field.
func ByImgSmallURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImgSmallURL, opts...).ToFunc()
}

// ByImgMediumURL orders the results by the img_medium_url field.
func ByImgMediumURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImgMediumURL, opts...).ToFunc()
}

// ByImgLargeURL orders the results by the img_large_url field.
func ByImgLargeURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImgLargeURL, opts...).ToFunc()
}

// ByReleaseDate orders the results by the release_date field.
func ByReleaseDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseDate, opts...).ToFunc()
}

// BySpotifyID orders the results by the spotify_id field.
func BySpotifyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpotifyID, opts...).ToFunc()
}

// ByDurationMs orders the results by the duration_ms field.
func ByDurationMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationMs, opts...).ToFunc()
}

// ByPreviewURL orders the results by the preview_url field.
func ByPreviewURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreviewURL, opts...).ToFunc()
}

// ByPopularity orders the results by the popularity field.
func ByPopularity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPopularity, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByPlaylistsCount orders the results by playlists count.
func ByPlaylistsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlaylistsStep(), opts...)
	}
}

// ByPlaylists orders the results by playlists terms.
func ByPlaylists(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlaylistsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlaylistsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlaylistsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PlaylistsTable, PlaylistsPrimaryKey...),
	)
}
