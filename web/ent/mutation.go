// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pineapple217/Sortify/web/ent/playlist"
	"github.com/Pineapple217/Sortify/web/ent/predicate"
	"github.com/Pineapple217/Sortify/web/ent/session"
	"github.com/Pineapple217/Sortify/web/ent/track"
	"github.com/Pineapple217/Sortify/web/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePlaylist = "Playlist"
	TypeSession  = "Session"
	TypeTrack    = "Track"
	TypeUser     = "User"
)

// PlaylistMutation represents an operation that mutates the Playlist nodes in the graph.
type PlaylistMutation struct {
	config
	op            Op
	typ           string
	id            *int
	deleted_at    *time.Time
	name          *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	tracks        map[int]struct{}
	removedtracks map[int]struct{}
	clearedtracks bool
	done          bool
	oldValue      func(context.Context) (*Playlist, error)
	predicates    []predicate.Playlist
}

var _ ent.Mutation = (*PlaylistMutation)(nil)

// playlistOption allows management of the mutation configuration using functional options.
type playlistOption func(*PlaylistMutation)

// newPlaylistMutation creates new mutation for the Playlist entity.
func newPlaylistMutation(c config, op Op, opts ...playlistOption) *PlaylistMutation {
	m := &PlaylistMutation{
		config:        c,
		op:            op,
		typ:           TypePlaylist,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlaylistID sets the ID field of the mutation.
func withPlaylistID(id int) playlistOption {
	return func(m *PlaylistMutation) {
		var (
			err   error
			once  sync.Once
			value *Playlist
		)
		m.oldValue = func(ctx context.Context) (*Playlist, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Playlist.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlaylist sets the old Playlist of the mutation.
func withPlaylist(node *Playlist) playlistOption {
	return func(m *PlaylistMutation) {
		m.oldValue = func(context.Context) (*Playlist, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlaylistMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlaylistMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlaylistMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlaylistMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Playlist.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PlaylistMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PlaylistMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *PlaylistMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[playlist.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *PlaylistMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[playlist.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PlaylistMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, playlist.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *PlaylistMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlaylistMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlaylistMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PlaylistMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PlaylistMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PlaylistMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PlaylistMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PlaylistMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Playlist entity.
// If the Playlist object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlaylistMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PlaylistMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *PlaylistMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *PlaylistMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PlaylistMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *PlaylistMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PlaylistMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PlaylistMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddTrackIDs adds the "tracks" edge to the Track entity by ids.
func (m *PlaylistMutation) AddTrackIDs(ids ...int) {
	if m.tracks == nil {
		m.tracks = make(map[int]struct{})
	}
	for i := range ids {
		m.tracks[ids[i]] = struct{}{}
	}
}

// ClearTracks clears the "tracks" edge to the Track entity.
func (m *PlaylistMutation) ClearTracks() {
	m.clearedtracks = true
}

// TracksCleared reports if the "tracks" edge to the Track entity was cleared.
func (m *PlaylistMutation) TracksCleared() bool {
	return m.clearedtracks
}

// RemoveTrackIDs removes the "tracks" edge to the Track entity by IDs.
func (m *PlaylistMutation) RemoveTrackIDs(ids ...int) {
	if m.removedtracks == nil {
		m.removedtracks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tracks, ids[i])
		m.removedtracks[ids[i]] = struct{}{}
	}
}

// RemovedTracks returns the removed IDs of the "tracks" edge to the Track entity.
func (m *PlaylistMutation) RemovedTracksIDs() (ids []int) {
	for id := range m.removedtracks {
		ids = append(ids, id)
	}
	return
}

// TracksIDs returns the "tracks" edge IDs in the mutation.
func (m *PlaylistMutation) TracksIDs() (ids []int) {
	for id := range m.tracks {
		ids = append(ids, id)
	}
	return
}

// ResetTracks resets all changes to the "tracks" edge.
func (m *PlaylistMutation) ResetTracks() {
	m.tracks = nil
	m.clearedtracks = false
	m.removedtracks = nil
}

// Where appends a list predicates to the PlaylistMutation builder.
func (m *PlaylistMutation) Where(ps ...predicate.Playlist) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlaylistMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlaylistMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Playlist, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlaylistMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlaylistMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Playlist).
func (m *PlaylistMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlaylistMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.deleted_at != nil {
		fields = append(fields, playlist.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, playlist.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, playlist.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, playlist.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlaylistMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playlist.FieldDeletedAt:
		return m.DeletedAt()
	case playlist.FieldName:
		return m.Name()
	case playlist.FieldCreatedAt:
		return m.CreatedAt()
	case playlist.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlaylistMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playlist.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case playlist.FieldName:
		return m.OldName(ctx)
	case playlist.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case playlist.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Playlist field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playlist.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case playlist.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case playlist.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case playlist.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Playlist field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlaylistMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlaylistMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlaylistMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Playlist numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlaylistMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(playlist.FieldDeletedAt) {
		fields = append(fields, playlist.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlaylistMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlaylistMutation) ClearField(name string) error {
	switch name {
	case playlist.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Playlist nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlaylistMutation) ResetField(name string) error {
	switch name {
	case playlist.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case playlist.FieldName:
		m.ResetName()
		return nil
	case playlist.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case playlist.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Playlist field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlaylistMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, playlist.EdgeUser)
	}
	if m.tracks != nil {
		edges = append(edges, playlist.EdgeTracks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlaylistMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playlist.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case playlist.EdgeTracks:
		ids := make([]ent.Value, 0, len(m.tracks))
		for id := range m.tracks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlaylistMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtracks != nil {
		edges = append(edges, playlist.EdgeTracks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlaylistMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case playlist.EdgeTracks:
		ids := make([]ent.Value, 0, len(m.removedtracks))
		for id := range m.removedtracks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlaylistMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, playlist.EdgeUser)
	}
	if m.clearedtracks {
		edges = append(edges, playlist.EdgeTracks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlaylistMutation) EdgeCleared(name string) bool {
	switch name {
	case playlist.EdgeUser:
		return m.cleareduser
	case playlist.EdgeTracks:
		return m.clearedtracks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlaylistMutation) ClearEdge(name string) error {
	switch name {
	case playlist.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Playlist unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlaylistMutation) ResetEdge(name string) error {
	switch name {
	case playlist.EdgeUser:
		m.ResetUser()
		return nil
	case playlist.EdgeTracks:
		m.ResetTracks()
		return nil
	}
	return fmt.Errorf("unknown Playlist edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	token                 *string
	ip_address            *string
	user_agent            *string
	expires_at            *time.Time
	last_login_at         *time.Time
	created_at            *time.Time
	spotify_access_token  *string
	spotify_refresh_token *string
	spotify_expiry        *time.Time
	clearedFields         map[string]struct{}
	user                  *int
	cleareduser           bool
	done                  bool
	oldValue              func(context.Context) (*Session, error)
	predicates            []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id int) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetToken sets the "token" field.
func (m *SessionMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *SessionMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *SessionMutation) ResetToken() {
	m.token = nil
}

// SetIPAddress sets the "ip_address" field.
func (m *SessionMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *SessionMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldIPAddress(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ClearIPAddress clears the value of the "ip_address" field.
func (m *SessionMutation) ClearIPAddress() {
	m.ip_address = nil
	m.clearedFields[session.FieldIPAddress] = struct{}{}
}

// IPAddressCleared returns if the "ip_address" field was cleared in this mutation.
func (m *SessionMutation) IPAddressCleared() bool {
	_, ok := m.clearedFields[session.FieldIPAddress]
	return ok
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *SessionMutation) ResetIPAddress() {
	m.ip_address = nil
	delete(m.clearedFields, session.FieldIPAddress)
}

// SetUserAgent sets the "user_agent" field.
func (m *SessionMutation) SetUserAgent(s string) {
	m.user_agent = &s
}

// UserAgent returns the value of the "user_agent" field in the mutation.
func (m *SessionMutation) UserAgent() (r string, exists bool) {
	v := m.user_agent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "user_agent" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUserAgent(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ClearUserAgent clears the value of the "user_agent" field.
func (m *SessionMutation) ClearUserAgent() {
	m.user_agent = nil
	m.clearedFields[session.FieldUserAgent] = struct{}{}
}

// UserAgentCleared returns if the "user_agent" field was cleared in this mutation.
func (m *SessionMutation) UserAgentCleared() bool {
	_, ok := m.clearedFields[session.FieldUserAgent]
	return ok
}

// ResetUserAgent resets all changes to the "user_agent" field.
func (m *SessionMutation) ResetUserAgent() {
	m.user_agent = nil
	delete(m.clearedFields, session.FieldUserAgent)
}

// SetExpiresAt sets the "expires_at" field.
func (m *SessionMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *SessionMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *SessionMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetLastLoginAt sets the "last_login_at" field.
func (m *SessionMutation) SetLastLoginAt(t time.Time) {
	m.last_login_at = &t
}

// LastLoginAt returns the value of the "last_login_at" field in the mutation.
func (m *SessionMutation) LastLoginAt() (r time.Time, exists bool) {
	v := m.last_login_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginAt returns the old "last_login_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldLastLoginAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginAt: %w", err)
	}
	return oldValue.LastLoginAt, nil
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (m *SessionMutation) ClearLastLoginAt() {
	m.last_login_at = nil
	m.clearedFields[session.FieldLastLoginAt] = struct{}{}
}

// LastLoginAtCleared returns if the "last_login_at" field was cleared in this mutation.
func (m *SessionMutation) LastLoginAtCleared() bool {
	_, ok := m.clearedFields[session.FieldLastLoginAt]
	return ok
}

// ResetLastLoginAt resets all changes to the "last_login_at" field.
func (m *SessionMutation) ResetLastLoginAt() {
	m.last_login_at = nil
	delete(m.clearedFields, session.FieldLastLoginAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *SessionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SessionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SessionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetSpotifyAccessToken sets the "spotify_access_token" field.
func (m *SessionMutation) SetSpotifyAccessToken(s string) {
	m.spotify_access_token = &s
}

// SpotifyAccessToken returns the value of the "spotify_access_token" field in the mutation.
func (m *SessionMutation) SpotifyAccessToken() (r string, exists bool) {
	v := m.spotify_access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldSpotifyAccessToken returns the old "spotify_access_token" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSpotifyAccessToken(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpotifyAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpotifyAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpotifyAccessToken: %w", err)
	}
	return oldValue.SpotifyAccessToken, nil
}

// ClearSpotifyAccessToken clears the value of the "spotify_access_token" field.
func (m *SessionMutation) ClearSpotifyAccessToken() {
	m.spotify_access_token = nil
	m.clearedFields[session.FieldSpotifyAccessToken] = struct{}{}
}

// SpotifyAccessTokenCleared returns if the "spotify_access_token" field was cleared in this mutation.
func (m *SessionMutation) SpotifyAccessTokenCleared() bool {
	_, ok := m.clearedFields[session.FieldSpotifyAccessToken]
	return ok
}

// ResetSpotifyAccessToken resets all changes to the "spotify_access_token" field.
func (m *SessionMutation) ResetSpotifyAccessToken() {
	m.spotify_access_token = nil
	delete(m.clearedFields, session.FieldSpotifyAccessToken)
}

// SetSpotifyRefreshToken sets the "spotify_refresh_token" field.
func (m *SessionMutation) SetSpotifyRefreshToken(s string) {
	m.spotify_refresh_token = &s
}

// SpotifyRefreshToken returns the value of the "spotify_refresh_token" field in the mutation.
func (m *SessionMutation) SpotifyRefreshToken() (r string, exists bool) {
	v := m.spotify_refresh_token
	if v == nil {
		return
	}
	return *v, true
}

// OldSpotifyRefreshToken returns the old "spotify_refresh_token" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSpotifyRefreshToken(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpotifyRefreshToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpotifyRefreshToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpotifyRefreshToken: %w", err)
	}
	return oldValue.SpotifyRefreshToken, nil
}

// ClearSpotifyRefreshToken clears the value of the "spotify_refresh_token" field.
func (m *SessionMutation) ClearSpotifyRefreshToken() {
	m.spotify_refresh_token = nil
	m.clearedFields[session.FieldSpotifyRefreshToken] = struct{}{}
}

// SpotifyRefreshTokenCleared returns if the "spotify_refresh_token" field was cleared in this mutation.
func (m *SessionMutation) SpotifyRefreshTokenCleared() bool {
	_, ok := m.clearedFields[session.FieldSpotifyRefreshToken]
	return ok
}

// ResetSpotifyRefreshToken resets all changes to the "spotify_refresh_token" field.
func (m *SessionMutation) ResetSpotifyRefreshToken() {
	m.spotify_refresh_token = nil
	delete(m.clearedFields, session.FieldSpotifyRefreshToken)
}

// SetSpotifyExpiry sets the "spotify_expiry" field.
func (m *SessionMutation) SetSpotifyExpiry(t time.Time) {
	m.spotify_expiry = &t
}

// SpotifyExpiry returns the value of the "spotify_expiry" field in the mutation.
func (m *SessionMutation) SpotifyExpiry() (r time.Time, exists bool) {
	v := m.spotify_expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldSpotifyExpiry returns the old "spotify_expiry" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSpotifyExpiry(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpotifyExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpotifyExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpotifyExpiry: %w", err)
	}
	return oldValue.SpotifyExpiry, nil
}

// ClearSpotifyExpiry clears the value of the "spotify_expiry" field.
func (m *SessionMutation) ClearSpotifyExpiry() {
	m.spotify_expiry = nil
	m.clearedFields[session.FieldSpotifyExpiry] = struct{}{}
}

// SpotifyExpiryCleared returns if the "spotify_expiry" field was cleared in this mutation.
func (m *SessionMutation) SpotifyExpiryCleared() bool {
	_, ok := m.clearedFields[session.FieldSpotifyExpiry]
	return ok
}

// ResetSpotifyExpiry resets all changes to the "spotify_expiry" field.
func (m *SessionMutation) ResetSpotifyExpiry() {
	m.spotify_expiry = nil
	delete(m.clearedFields, session.FieldSpotifyExpiry)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SessionMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SessionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SessionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SessionMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Session, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.token != nil {
		fields = append(fields, session.FieldToken)
	}
	if m.ip_address != nil {
		fields = append(fields, session.FieldIPAddress)
	}
	if m.user_agent != nil {
		fields = append(fields, session.FieldUserAgent)
	}
	if m.expires_at != nil {
		fields = append(fields, session.FieldExpiresAt)
	}
	if m.last_login_at != nil {
		fields = append(fields, session.FieldLastLoginAt)
	}
	if m.created_at != nil {
		fields = append(fields, session.FieldCreatedAt)
	}
	if m.spotify_access_token != nil {
		fields = append(fields, session.FieldSpotifyAccessToken)
	}
	if m.spotify_refresh_token != nil {
		fields = append(fields, session.FieldSpotifyRefreshToken)
	}
	if m.spotify_expiry != nil {
		fields = append(fields, session.FieldSpotifyExpiry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldToken:
		return m.Token()
	case session.FieldIPAddress:
		return m.IPAddress()
	case session.FieldUserAgent:
		return m.UserAgent()
	case session.FieldExpiresAt:
		return m.ExpiresAt()
	case session.FieldLastLoginAt:
		return m.LastLoginAt()
	case session.FieldCreatedAt:
		return m.CreatedAt()
	case session.FieldSpotifyAccessToken:
		return m.SpotifyAccessToken()
	case session.FieldSpotifyRefreshToken:
		return m.SpotifyRefreshToken()
	case session.FieldSpotifyExpiry:
		return m.SpotifyExpiry()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldToken:
		return m.OldToken(ctx)
	case session.FieldIPAddress:
		return m.OldIPAddress(ctx)
	case session.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case session.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case session.FieldLastLoginAt:
		return m.OldLastLoginAt(ctx)
	case session.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case session.FieldSpotifyAccessToken:
		return m.OldSpotifyAccessToken(ctx)
	case session.FieldSpotifyRefreshToken:
		return m.OldSpotifyRefreshToken(ctx)
	case session.FieldSpotifyExpiry:
		return m.OldSpotifyExpiry(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case session.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	case session.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case session.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case session.FieldLastLoginAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginAt(v)
		return nil
	case session.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case session.FieldSpotifyAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpotifyAccessToken(v)
		return nil
	case session.FieldSpotifyRefreshToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpotifyRefreshToken(v)
		return nil
	case session.FieldSpotifyExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpotifyExpiry(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(session.FieldIPAddress) {
		fields = append(fields, session.FieldIPAddress)
	}
	if m.FieldCleared(session.FieldUserAgent) {
		fields = append(fields, session.FieldUserAgent)
	}
	if m.FieldCleared(session.FieldLastLoginAt) {
		fields = append(fields, session.FieldLastLoginAt)
	}
	if m.FieldCleared(session.FieldSpotifyAccessToken) {
		fields = append(fields, session.FieldSpotifyAccessToken)
	}
	if m.FieldCleared(session.FieldSpotifyRefreshToken) {
		fields = append(fields, session.FieldSpotifyRefreshToken)
	}
	if m.FieldCleared(session.FieldSpotifyExpiry) {
		fields = append(fields, session.FieldSpotifyExpiry)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	switch name {
	case session.FieldIPAddress:
		m.ClearIPAddress()
		return nil
	case session.FieldUserAgent:
		m.ClearUserAgent()
		return nil
	case session.FieldLastLoginAt:
		m.ClearLastLoginAt()
		return nil
	case session.FieldSpotifyAccessToken:
		m.ClearSpotifyAccessToken()
		return nil
	case session.FieldSpotifyRefreshToken:
		m.ClearSpotifyRefreshToken()
		return nil
	case session.FieldSpotifyExpiry:
		m.ClearSpotifyExpiry()
		return nil
	}
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldToken:
		m.ResetToken()
		return nil
	case session.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	case session.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case session.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case session.FieldLastLoginAt:
		m.ResetLastLoginAt()
		return nil
	case session.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case session.FieldSpotifyAccessToken:
		m.ResetSpotifyAccessToken()
		return nil
	case session.FieldSpotifyRefreshToken:
		m.ResetSpotifyRefreshToken()
		return nil
	case session.FieldSpotifyExpiry:
		m.ResetSpotifyExpiry()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// TrackMutation represents an operation that mutates the Track nodes in the graph.
type TrackMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	artist           *string
	img_small_url    *string
	img_medium_url   *string
	img_large_url    *string
	release_date     *time.Time
	spotify_id       *string
	duration_ms      *int
	addduration_ms   *int
	preview_url      *string
	popularity       *int
	addpopularity    *int
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	clearedFields    map[string]struct{}
	playlists        map[int]struct{}
	removedplaylists map[int]struct{}
	clearedplaylists bool
	done             bool
	oldValue         func(context.Context) (*Track, error)
	predicates       []predicate.Track
}

var _ ent.Mutation = (*TrackMutation)(nil)

// trackOption allows management of the mutation configuration using functional options.
type trackOption func(*TrackMutation)

// newTrackMutation creates new mutation for the Track entity.
func newTrackMutation(c config, op Op, opts ...trackOption) *TrackMutation {
	m := &TrackMutation{
		config:        c,
		op:            op,
		typ:           TypeTrack,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTrackID sets the ID field of the mutation.
func withTrackID(id int) trackOption {
	return func(m *TrackMutation) {
		var (
			err   error
			once  sync.Once
			value *Track
		)
		m.oldValue = func(ctx context.Context) (*Track, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Track.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrack sets the old Track of the mutation.
func withTrack(node *Track) trackOption {
	return func(m *TrackMutation) {
		m.oldValue = func(context.Context) (*Track, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TrackMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TrackMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TrackMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TrackMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Track.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TrackMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TrackMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TrackMutation) ResetName() {
	m.name = nil
}

// SetArtist sets the "artist" field.
func (m *TrackMutation) SetArtist(s string) {
	m.artist = &s
}

// Artist returns the value of the "artist" field in the mutation.
func (m *TrackMutation) Artist() (r string, exists bool) {
	v := m.artist
	if v == nil {
		return
	}
	return *v, true
}

// OldArtist returns the old "artist" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldArtist(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArtist is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArtist requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArtist: %w", err)
	}
	return oldValue.Artist, nil
}

// ResetArtist resets all changes to the "artist" field.
func (m *TrackMutation) ResetArtist() {
	m.artist = nil
}

// SetImgSmallURL sets the "img_small_url" field.
func (m *TrackMutation) SetImgSmallURL(s string) {
	m.img_small_url = &s
}

// ImgSmallURL returns the value of the "img_small_url" field in the mutation.
func (m *TrackMutation) ImgSmallURL() (r string, exists bool) {
	v := m.img_small_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImgSmallURL returns the old "img_small_url" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldImgSmallURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImgSmallURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImgSmallURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImgSmallURL: %w", err)
	}
	return oldValue.ImgSmallURL, nil
}

// ClearImgSmallURL clears the value of the "img_small_url" field.
func (m *TrackMutation) ClearImgSmallURL() {
	m.img_small_url = nil
	m.clearedFields[track.FieldImgSmallURL] = struct{}{}
}

// ImgSmallURLCleared returns if the "img_small_url" field was cleared in this mutation.
func (m *TrackMutation) ImgSmallURLCleared() bool {
	_, ok := m.clearedFields[track.FieldImgSmallURL]
	return ok
}

// ResetImgSmallURL resets all changes to the "img_small_url" field.
func (m *TrackMutation) ResetImgSmallURL() {
	m.img_small_url = nil
	delete(m.clearedFields, track.FieldImgSmallURL)
}

// SetImgMediumURL sets the "img_medium_url" field.
func (m *TrackMutation) SetImgMediumURL(s string) {
	m.img_medium_url = &s
}

// ImgMediumURL returns the value of the "img_medium_url" field in the mutation.
func (m *TrackMutation) ImgMediumURL() (r string, exists bool) {
	v := m.img_medium_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImgMediumURL returns the old "img_medium_url" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldImgMediumURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImgMediumURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImgMediumURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImgMediumURL: %w", err)
	}
	return oldValue.ImgMediumURL, nil
}

// ClearImgMediumURL clears the value of the "img_medium_url" field.
func (m *TrackMutation) ClearImgMediumURL() {
	m.img_medium_url = nil
	m.clearedFields[track.FieldImgMediumURL] = struct{}{}
}

// ImgMediumURLCleared returns if the "img_medium_url" field was cleared in this mutation.
func (m *TrackMutation) ImgMediumURLCleared() bool {
	_, ok := m.clearedFields[track.FieldImgMediumURL]
	return ok
}

// ResetImgMediumURL resets all changes to the "img_medium_url" field.
func (m *TrackMutation) ResetImgMediumURL() {
	m.img_medium_url = nil
	delete(m.clearedFields, track.FieldImgMediumURL)
}

// SetImgLargeURL sets the "img_large_url" field.
func (m *TrackMutation) SetImgLargeURL(s string) {
	m.img_large_url = &s
}

// ImgLargeURL returns the value of the "img_large_url" field in the mutation.
func (m *TrackMutation) ImgLargeURL() (r string, exists bool) {
	v := m.img_large_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImgLargeURL returns the old "img_large_url" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldImgLargeURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImgLargeURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImgLargeURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImgLargeURL: %w", err)
	}
	return oldValue.ImgLargeURL, nil
}

// ClearImgLargeURL clears the value of the "img_large_url" field.
func (m *TrackMutation) ClearImgLargeURL() {
	m.img_large_url = nil
	m.clearedFields[track.FieldImgLargeURL] = struct{}{}
}

// ImgLargeURLCleared returns if the "img_large_url" field was cleared in this mutation.
func (m *TrackMutation) ImgLargeURLCleared() bool {
	_, ok := m.clearedFields[track.FieldImgLargeURL]
	return ok
}

// ResetImgLargeURL resets all changes to the "img_large_url" field.
func (m *TrackMutation) ResetImgLargeURL() {
	m.img_large_url = nil
	delete(m.clearedFields, track.FieldImgLargeURL)
}

// SetReleaseDate sets the "release_date" field.
func (m *TrackMutation) SetReleaseDate(t time.Time) {
	m.release_date = &t
}

// ReleaseDate returns the value of the "release_date" field in the mutation.
func (m *TrackMutation) ReleaseDate() (r time.Time, exists bool) {
	v := m.release_date
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseDate returns the old "release_date" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldReleaseDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleaseDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleaseDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseDate: %w", err)
	}
	return oldValue.ReleaseDate, nil
}

// ResetReleaseDate resets all changes to the "release_date" field.
func (m *TrackMutation) ResetReleaseDate() {
	m.release_date = nil
}

// SetSpotifyID sets the "spotify_id" field.
func (m *TrackMutation) SetSpotifyID(s string) {
	m.spotify_id = &s
}

// SpotifyID returns the value of the "spotify_id" field in the mutation.
func (m *TrackMutation) SpotifyID() (r string, exists bool) {
	v := m.spotify_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSpotifyID returns the old "spotify_id" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldSpotifyID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpotifyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpotifyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpotifyID: %w", err)
	}
	return oldValue.SpotifyID, nil
}

// ResetSpotifyID resets all changes to the "spotify_id" field.
func (m *TrackMutation) ResetSpotifyID() {
	m.spotify_id = nil
}

// SetDurationMs sets the "duration_ms" field.
func (m *TrackMutation) SetDurationMs(i int) {
	m.duration_ms = &i
	m.addduration_ms = nil
}

// DurationMs returns the value of the "duration_ms" field in the mutation.
func (m *TrackMutation) DurationMs() (r int, exists bool) {
	v := m.duration_ms
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationMs returns the old "duration_ms" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldDurationMs(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationMs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationMs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationMs: %w", err)
	}
	return oldValue.DurationMs, nil
}

// AddDurationMs adds i to the "duration_ms" field.
func (m *TrackMutation) AddDurationMs(i int) {
	if m.addduration_ms != nil {
		*m.addduration_ms += i
	} else {
		m.addduration_ms = &i
	}
}

// AddedDurationMs returns the value that was added to the "duration_ms" field in this mutation.
func (m *TrackMutation) AddedDurationMs() (r int, exists bool) {
	v := m.addduration_ms
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationMs resets all changes to the "duration_ms" field.
func (m *TrackMutation) ResetDurationMs() {
	m.duration_ms = nil
	m.addduration_ms = nil
}

// SetPreviewURL sets the "preview_url" field.
func (m *TrackMutation) SetPreviewURL(s string) {
	m.preview_url = &s
}

// PreviewURL returns the value of the "preview_url" field in the mutation.
func (m *TrackMutation) PreviewURL() (r string, exists bool) {
	v := m.preview_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPreviewURL returns the old "preview_url" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldPreviewURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPreviewURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPreviewURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPreviewURL: %w", err)
	}
	return oldValue.PreviewURL, nil
}

// ClearPreviewURL clears the value of the "preview_url" field.
func (m *TrackMutation) ClearPreviewURL() {
	m.preview_url = nil
	m.clearedFields[track.FieldPreviewURL] = struct{}{}
}

// PreviewURLCleared returns if the "preview_url" field was cleared in this mutation.
func (m *TrackMutation) PreviewURLCleared() bool {
	_, ok := m.clearedFields[track.FieldPreviewURL]
	return ok
}

// ResetPreviewURL resets all changes to the "preview_url" field.
func (m *TrackMutation) ResetPreviewURL() {
	m.preview_url = nil
	delete(m.clearedFields, track.FieldPreviewURL)
}

// SetPopularity sets the "popularity" field.
func (m *TrackMutation) SetPopularity(i int) {
	m.popularity = &i
	m.addpopularity = nil
}

// Popularity returns the value of the "popularity" field in the mutation.
func (m *TrackMutation) Popularity() (r int, exists bool) {
	v := m.popularity
	if v == nil {
		return
	}
	return *v, true
}

// OldPopularity returns the old "popularity" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldPopularity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPopularity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPopularity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPopularity: %w", err)
	}
	return oldValue.Popularity, nil
}

// AddPopularity adds i to the "popularity" field.
func (m *TrackMutation) AddPopularity(i int) {
	if m.addpopularity != nil {
		*m.addpopularity += i
	} else {
		m.addpopularity = &i
	}
}

// AddedPopularity returns the value that was added to the "popularity" field in this mutation.
func (m *TrackMutation) AddedPopularity() (r int, exists bool) {
	v := m.addpopularity
	if v == nil {
		return
	}
	return *v, true
}

// ResetPopularity resets all changes to the "popularity" field.
func (m *TrackMutation) ResetPopularity() {
	m.popularity = nil
	m.addpopularity = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TrackMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TrackMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TrackMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TrackMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TrackMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TrackMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TrackMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TrackMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Track entity.
// If the Track object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrackMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *TrackMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[track.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *TrackMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[track.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TrackMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, track.FieldDeletedAt)
}

// AddPlaylistIDs adds the "playlists" edge to the Playlist entity by ids.
func (m *TrackMutation) AddPlaylistIDs(ids ...int) {
	if m.playlists == nil {
		m.playlists = make(map[int]struct{})
	}
	for i := range ids {
		m.playlists[ids[i]] = struct{}{}
	}
}

// ClearPlaylists clears the "playlists" edge to the Playlist entity.
func (m *TrackMutation) ClearPlaylists() {
	m.clearedplaylists = true
}

// PlaylistsCleared reports if the "playlists" edge to the Playlist entity was cleared.
func (m *TrackMutation) PlaylistsCleared() bool {
	return m.clearedplaylists
}

// RemovePlaylistIDs removes the "playlists" edge to the Playlist entity by IDs.
func (m *TrackMutation) RemovePlaylistIDs(ids ...int) {
	if m.removedplaylists == nil {
		m.removedplaylists = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.playlists, ids[i])
		m.removedplaylists[ids[i]] = struct{}{}
	}
}

// RemovedPlaylists returns the removed IDs of the "playlists" edge to the Playlist entity.
func (m *TrackMutation) RemovedPlaylistsIDs() (ids []int) {
	for id := range m.removedplaylists {
		ids = append(ids, id)
	}
	return
}

// PlaylistsIDs returns the "playlists" edge IDs in the mutation.
func (m *TrackMutation) PlaylistsIDs() (ids []int) {
	for id := range m.playlists {
		ids = append(ids, id)
	}
	return
}

// ResetPlaylists resets all changes to the "playlists" edge.
func (m *TrackMutation) ResetPlaylists() {
	m.playlists = nil
	m.clearedplaylists = false
	m.removedplaylists = nil
}

// Where appends a list predicates to the TrackMutation builder.
func (m *TrackMutation) Where(ps ...predicate.Track) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TrackMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TrackMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Track, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TrackMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TrackMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Track).
func (m *TrackMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TrackMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.name != nil {
		fields = append(fields, track.FieldName)
	}
	if m.artist != nil {
		fields = append(fields, track.FieldArtist)
	}
	if m.img_small_url != nil {
		fields = append(fields, track.FieldImgSmallURL)
	}
	if m.img_medium_url != nil {
		fields = append(fields, track.FieldImgMediumURL)
	}
	if m.img_large_url != nil {
		fields = append(fields, track.FieldImgLargeURL)
	}
	if m.release_date != nil {
		fields = append(fields, track.FieldReleaseDate)
	}
	if m.spotify_id != nil {
		fields = append(fields, track.FieldSpotifyID)
	}
	if m.duration_ms != nil {
		fields = append(fields, track.FieldDurationMs)
	}
	if m.preview_url != nil {
		fields = append(fields, track.FieldPreviewURL)
	}
	if m.popularity != nil {
		fields = append(fields, track.FieldPopularity)
	}
	if m.created_at != nil {
		fields = append(fields, track.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, track.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, track.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TrackMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case track.FieldName:
		return m.Name()
	case track.FieldArtist:
		return m.Artist()
	case track.FieldImgSmallURL:
		return m.ImgSmallURL()
	case track.FieldImgMediumURL:
		return m.ImgMediumURL()
	case track.FieldImgLargeURL:
		return m.ImgLargeURL()
	case track.FieldReleaseDate:
		return m.ReleaseDate()
	case track.FieldSpotifyID:
		return m.SpotifyID()
	case track.FieldDurationMs:
		return m.DurationMs()
	case track.FieldPreviewURL:
		return m.PreviewURL()
	case track.FieldPopularity:
		return m.Popularity()
	case track.FieldCreatedAt:
		return m.CreatedAt()
	case track.FieldUpdatedAt:
		return m.UpdatedAt()
	case track.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TrackMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case track.FieldName:
		return m.OldName(ctx)
	case track.FieldArtist:
		return m.OldArtist(ctx)
	case track.FieldImgSmallURL:
		return m.OldImgSmallURL(ctx)
	case track.FieldImgMediumURL:
		return m.OldImgMediumURL(ctx)
	case track.FieldImgLargeURL:
		return m.OldImgLargeURL(ctx)
	case track.FieldReleaseDate:
		return m.OldReleaseDate(ctx)
	case track.FieldSpotifyID:
		return m.OldSpotifyID(ctx)
	case track.FieldDurationMs:
		return m.OldDurationMs(ctx)
	case track.FieldPreviewURL:
		return m.OldPreviewURL(ctx)
	case track.FieldPopularity:
		return m.OldPopularity(ctx)
	case track.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case track.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case track.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Track field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrackMutation) SetField(name string, value ent.Value) error {
	switch name {
	case track.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case track.FieldArtist:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArtist(v)
		return nil
	case track.FieldImgSmallURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImgSmallURL(v)
		return nil
	case track.FieldImgMediumURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImgMediumURL(v)
		return nil
	case track.FieldImgLargeURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImgLargeURL(v)
		return nil
	case track.FieldReleaseDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseDate(v)
		return nil
	case track.FieldSpotifyID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpotifyID(v)
		return nil
	case track.FieldDurationMs:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationMs(v)
		return nil
	case track.FieldPreviewURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPreviewURL(v)
		return nil
	case track.FieldPopularity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPopularity(v)
		return nil
	case track.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case track.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case track.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Track field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TrackMutation) AddedFields() []string {
	var fields []string
	if m.addduration_ms != nil {
		fields = append(fields, track.FieldDurationMs)
	}
	if m.addpopularity != nil {
		fields = append(fields, track.FieldPopularity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TrackMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case track.FieldDurationMs:
		return m.AddedDurationMs()
	case track.FieldPopularity:
		return m.AddedPopularity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrackMutation) AddField(name string, value ent.Value) error {
	switch name {
	case track.FieldDurationMs:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationMs(v)
		return nil
	case track.FieldPopularity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPopularity(v)
		return nil
	}
	return fmt.Errorf("unknown Track numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TrackMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(track.FieldImgSmallURL) {
		fields = append(fields, track.FieldImgSmallURL)
	}
	if m.FieldCleared(track.FieldImgMediumURL) {
		fields = append(fields, track.FieldImgMediumURL)
	}
	if m.FieldCleared(track.FieldImgLargeURL) {
		fields = append(fields, track.FieldImgLargeURL)
	}
	if m.FieldCleared(track.FieldPreviewURL) {
		fields = append(fields, track.FieldPreviewURL)
	}
	if m.FieldCleared(track.FieldDeletedAt) {
		fields = append(fields, track.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TrackMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TrackMutation) ClearField(name string) error {
	switch name {
	case track.FieldImgSmallURL:
		m.ClearImgSmallURL()
		return nil
	case track.FieldImgMediumURL:
		m.ClearImgMediumURL()
		return nil
	case track.FieldImgLargeURL:
		m.ClearImgLargeURL()
		return nil
	case track.FieldPreviewURL:
		m.ClearPreviewURL()
		return nil
	case track.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Track nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TrackMutation) ResetField(name string) error {
	switch name {
	case track.FieldName:
		m.ResetName()
		return nil
	case track.FieldArtist:
		m.ResetArtist()
		return nil
	case track.FieldImgSmallURL:
		m.ResetImgSmallURL()
		return nil
	case track.FieldImgMediumURL:
		m.ResetImgMediumURL()
		return nil
	case track.FieldImgLargeURL:
		m.ResetImgLargeURL()
		return nil
	case track.FieldReleaseDate:
		m.ResetReleaseDate()
		return nil
	case track.FieldSpotifyID:
		m.ResetSpotifyID()
		return nil
	case track.FieldDurationMs:
		m.ResetDurationMs()
		return nil
	case track.FieldPreviewURL:
		m.ResetPreviewURL()
		return nil
	case track.FieldPopularity:
		m.ResetPopularity()
		return nil
	case track.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case track.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case track.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Track field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TrackMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.playlists != nil {
		edges = append(edges, track.EdgePlaylists)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TrackMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case track.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.playlists))
		for id := range m.playlists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TrackMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedplaylists != nil {
		edges = append(edges, track.EdgePlaylists)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TrackMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case track.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.removedplaylists))
		for id := range m.removedplaylists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TrackMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedplaylists {
		edges = append(edges, track.EdgePlaylists)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TrackMutation) EdgeCleared(name string) bool {
	switch name {
	case track.EdgePlaylists:
		return m.clearedplaylists
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TrackMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Track unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TrackMutation) ResetEdge(name string) error {
	switch name {
	case track.EdgePlaylists:
		m.ResetPlaylists()
		return nil
	}
	return fmt.Errorf("unknown Track edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *int
	username         *string
	password_hash    *string
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	sessions         map[int]struct{}
	removedsessions  map[int]struct{}
	clearedsessions  bool
	playlists        map[int]struct{}
	removedplaylists map[int]struct{}
	clearedplaylists bool
	done             bool
	oldValue         func(context.Context) (*User, error)
	predicates       []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *UserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *UserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *UserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *UserMutation) AddSessionIDs(ids ...int) {
	if m.sessions == nil {
		m.sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *UserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared reports if the "sessions" edge to the Session entity was cleared.
func (m *UserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *UserMutation) RemoveSessionIDs(ids ...int) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sessions, ids[i])
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *UserMutation) RemovedSessionsIDs() (ids []int) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *UserMutation) SessionsIDs() (ids []int) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *UserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// AddPlaylistIDs adds the "playlists" edge to the Playlist entity by ids.
func (m *UserMutation) AddPlaylistIDs(ids ...int) {
	if m.playlists == nil {
		m.playlists = make(map[int]struct{})
	}
	for i := range ids {
		m.playlists[ids[i]] = struct{}{}
	}
}

// ClearPlaylists clears the "playlists" edge to the Playlist entity.
func (m *UserMutation) ClearPlaylists() {
	m.clearedplaylists = true
}

// PlaylistsCleared reports if the "playlists" edge to the Playlist entity was cleared.
func (m *UserMutation) PlaylistsCleared() bool {
	return m.clearedplaylists
}

// RemovePlaylistIDs removes the "playlists" edge to the Playlist entity by IDs.
func (m *UserMutation) RemovePlaylistIDs(ids ...int) {
	if m.removedplaylists == nil {
		m.removedplaylists = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.playlists, ids[i])
		m.removedplaylists[ids[i]] = struct{}{}
	}
}

// RemovedPlaylists returns the removed IDs of the "playlists" edge to the Playlist entity.
func (m *UserMutation) RemovedPlaylistsIDs() (ids []int) {
	for id := range m.removedplaylists {
		ids = append(ids, id)
	}
	return
}

// PlaylistsIDs returns the "playlists" edge IDs in the mutation.
func (m *UserMutation) PlaylistsIDs() (ids []int) {
	for id := range m.playlists {
		ids = append(ids, id)
	}
	return
}

// ResetPlaylists resets all changes to the "playlists" edge.
func (m *UserMutation) ResetPlaylists() {
	m.playlists = nil
	m.clearedplaylists = false
	m.removedplaylists = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password_hash != nil {
		fields = append(fields, user.FieldPasswordHash)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPasswordHash:
		return m.PasswordHash()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.sessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.playlists != nil {
		edges = append(edges, user.EdgePlaylists)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.playlists))
		for id := range m.playlists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.removedplaylists != nil {
		edges = append(edges, user.EdgePlaylists)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePlaylists:
		ids := make([]ent.Value, 0, len(m.removedplaylists))
		for id := range m.removedplaylists {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsessions {
		edges = append(edges, user.EdgeSessions)
	}
	if m.clearedplaylists {
		edges = append(edges, user.EdgePlaylists)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSessions:
		return m.clearedsessions
	case user.EdgePlaylists:
		return m.clearedplaylists
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSessions:
		m.ResetSessions()
		return nil
	case user.EdgePlaylists:
		m.ResetPlaylists()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
