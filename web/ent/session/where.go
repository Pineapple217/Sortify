// Code generated by ent, DO NOT EDIT.

package session

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pineapple217/Sortify/web/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldToken, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUserAgent, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldExpiresAt, v))
}

// LastLoginAt applies equality check predicate on the "last_login_at" field. It's identical to LastLoginAtEQ.
func LastLoginAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldLastLoginAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// SpotifyAccessToken applies equality check predicate on the "spotify_access_token" field. It's identical to SpotifyAccessTokenEQ.
func SpotifyAccessToken(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSpotifyAccessToken, v))
}

// SpotifyRefreshToken applies equality check predicate on the "spotify_refresh_token" field. It's identical to SpotifyRefreshTokenEQ.
func SpotifyRefreshToken(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSpotifyRefreshToken, v))
}

// SpotifyExpiry applies equality check predicate on the "spotify_expiry" field. It's identical to SpotifyExpiryEQ.
func SpotifyExpiry(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSpotifyExpiry, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldToken, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldUserAgent, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldExpiresAt, v))
}

// LastLoginAtEQ applies the EQ predicate on the "last_login_at" field.
func LastLoginAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginAtNEQ applies the NEQ predicate on the "last_login_at" field.
func LastLoginAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldLastLoginAt, v))
}

// LastLoginAtIn applies the In predicate on the "last_login_at" field.
func LastLoginAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldLastLoginAt, vs...))
}

// LastLoginAtNotIn applies the NotIn predicate on the "last_login_at" field.
func LastLoginAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldLastLoginAt, vs...))
}

// LastLoginAtGT applies the GT predicate on the "last_login_at" field.
func LastLoginAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldLastLoginAt, v))
}

// LastLoginAtGTE applies the GTE predicate on the "last_login_at" field.
func LastLoginAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldLastLoginAt, v))
}

// LastLoginAtLT applies the LT predicate on the "last_login_at" field.
func LastLoginAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldLastLoginAt, v))
}

// LastLoginAtLTE applies the LTE predicate on the "last_login_at" field.
func LastLoginAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldLastLoginAt, v))
}

// LastLoginAtIsNil applies the IsNil predicate on the "last_login_at" field.
func LastLoginAtIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldLastLoginAt))
}

// LastLoginAtNotNil applies the NotNil predicate on the "last_login_at" field.
func LastLoginAtNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldLastLoginAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldCreatedAt, v))
}

// SpotifyAccessTokenEQ applies the EQ predicate on the "spotify_access_token" field.
func SpotifyAccessTokenEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSpotifyAccessToken, v))
}

// SpotifyAccessTokenNEQ applies the NEQ predicate on the "spotify_access_token" field.
func SpotifyAccessTokenNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldSpotifyAccessToken, v))
}

// SpotifyAccessTokenIn applies the In predicate on the "spotify_access_token" field.
func SpotifyAccessTokenIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldSpotifyAccessToken, vs...))
}

// SpotifyAccessTokenNotIn applies the NotIn predicate on the "spotify_access_token" field.
func SpotifyAccessTokenNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldSpotifyAccessToken, vs...))
}

// SpotifyAccessTokenGT applies the GT predicate on the "spotify_access_token" field.
func SpotifyAccessTokenGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldSpotifyAccessToken, v))
}

// SpotifyAccessTokenGTE applies the GTE predicate on the "spotify_access_token" field.
func SpotifyAccessTokenGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldSpotifyAccessToken, v))
}

// SpotifyAccessTokenLT applies the LT predicate on the "spotify_access_token" field.
func SpotifyAccessTokenLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldSpotifyAccessToken, v))
}

// SpotifyAccessTokenLTE applies the LTE predicate on the "spotify_access_token" field.
func SpotifyAccessTokenLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldSpotifyAccessToken, v))
}

// SpotifyAccessTokenContains applies the Contains predicate on the "spotify_access_token" field.
func SpotifyAccessTokenContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldSpotifyAccessToken, v))
}

// SpotifyAccessTokenHasPrefix applies the HasPrefix predicate on the "spotify_access_token" field.
func SpotifyAccessTokenHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldSpotifyAccessToken, v))
}

// SpotifyAccessTokenHasSuffix applies the HasSuffix predicate on the "spotify_access_token" field.
func SpotifyAccessTokenHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldSpotifyAccessToken, v))
}

// SpotifyAccessTokenIsNil applies the IsNil predicate on the "spotify_access_token" field.
func SpotifyAccessTokenIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldSpotifyAccessToken))
}

// SpotifyAccessTokenNotNil applies the NotNil predicate on the "spotify_access_token" field.
func SpotifyAccessTokenNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldSpotifyAccessToken))
}

// SpotifyAccessTokenEqualFold applies the EqualFold predicate on the "spotify_access_token" field.
func SpotifyAccessTokenEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldSpotifyAccessToken, v))
}

// SpotifyAccessTokenContainsFold applies the ContainsFold predicate on the "spotify_access_token" field.
func SpotifyAccessTokenContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldSpotifyAccessToken, v))
}

// SpotifyRefreshTokenEQ applies the EQ predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSpotifyRefreshToken, v))
}

// SpotifyRefreshTokenNEQ applies the NEQ predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldSpotifyRefreshToken, v))
}

// SpotifyRefreshTokenIn applies the In predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldSpotifyRefreshToken, vs...))
}

// SpotifyRefreshTokenNotIn applies the NotIn predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldSpotifyRefreshToken, vs...))
}

// SpotifyRefreshTokenGT applies the GT predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldSpotifyRefreshToken, v))
}

// SpotifyRefreshTokenGTE applies the GTE predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldSpotifyRefreshToken, v))
}

// SpotifyRefreshTokenLT applies the LT predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldSpotifyRefreshToken, v))
}

// SpotifyRefreshTokenLTE applies the LTE predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldSpotifyRefreshToken, v))
}

// SpotifyRefreshTokenContains applies the Contains predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldSpotifyRefreshToken, v))
}

// SpotifyRefreshTokenHasPrefix applies the HasPrefix predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldSpotifyRefreshToken, v))
}

// SpotifyRefreshTokenHasSuffix applies the HasSuffix predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldSpotifyRefreshToken, v))
}

// SpotifyRefreshTokenIsNil applies the IsNil predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldSpotifyRefreshToken))
}

// SpotifyRefreshTokenNotNil applies the NotNil predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldSpotifyRefreshToken))
}

// SpotifyRefreshTokenEqualFold applies the EqualFold predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldSpotifyRefreshToken, v))
}

// SpotifyRefreshTokenContainsFold applies the ContainsFold predicate on the "spotify_refresh_token" field.
func SpotifyRefreshTokenContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldSpotifyRefreshToken, v))
}

// SpotifyExpiryEQ applies the EQ predicate on the "spotify_expiry" field.
func SpotifyExpiryEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSpotifyExpiry, v))
}

// SpotifyExpiryNEQ applies the NEQ predicate on the "spotify_expiry" field.
func SpotifyExpiryNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldSpotifyExpiry, v))
}

// SpotifyExpiryIn applies the In predicate on the "spotify_expiry" field.
func SpotifyExpiryIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldSpotifyExpiry, vs...))
}

// SpotifyExpiryNotIn applies the NotIn predicate on the "spotify_expiry" field.
func SpotifyExpiryNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldSpotifyExpiry, vs...))
}

// SpotifyExpiryGT applies the GT predicate on the "spotify_expiry" field.
func SpotifyExpiryGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldSpotifyExpiry, v))
}

// SpotifyExpiryGTE applies the GTE predicate on the "spotify_expiry" field.
func SpotifyExpiryGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldSpotifyExpiry, v))
}

// SpotifyExpiryLT applies the LT predicate on the "spotify_expiry" field.
func SpotifyExpiryLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldSpotifyExpiry, v))
}

// SpotifyExpiryLTE applies the LTE predicate on the "spotify_expiry" field.
func SpotifyExpiryLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldSpotifyExpiry, v))
}

// SpotifyExpiryIsNil applies the IsNil predicate on the "spotify_expiry" field.
func SpotifyExpiryIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldSpotifyExpiry))
}

// SpotifyExpiryNotNil applies the NotNil predicate on the "spotify_expiry" field.
func SpotifyExpiryNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldSpotifyExpiry))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(sql.NotPredicates(p))
}
