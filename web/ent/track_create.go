// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/Sortify/web/ent/playlist"
	"github.com/Pineapple217/Sortify/web/ent/track"
)

// TrackCreate is the builder for creating a Track entity.
type TrackCreate struct {
	config
	mutation *TrackMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tc *TrackCreate) SetName(s string) *TrackCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetArtist sets the "artist" field.
func (tc *TrackCreate) SetArtist(s string) *TrackCreate {
	tc.mutation.SetArtist(s)
	return tc
}

// SetImgSmallURL sets the "img_small_url" field.
func (tc *TrackCreate) SetImgSmallURL(s string) *TrackCreate {
	tc.mutation.SetImgSmallURL(s)
	return tc
}

// SetNillableImgSmallURL sets the "img_small_url" field if the given value is not nil.
func (tc *TrackCreate) SetNillableImgSmallURL(s *string) *TrackCreate {
	if s != nil {
		tc.SetImgSmallURL(*s)
	}
	return tc
}

// SetImgMediumURL sets the "img_medium_url" field.
func (tc *TrackCreate) SetImgMediumURL(s string) *TrackCreate {
	tc.mutation.SetImgMediumURL(s)
	return tc
}

// SetNillableImgMediumURL sets the "img_medium_url" field if the given value is not nil.
func (tc *TrackCreate) SetNillableImgMediumURL(s *string) *TrackCreate {
	if s != nil {
		tc.SetImgMediumURL(*s)
	}
	return tc
}

// SetImgLargeURL sets the "img_large_url" field.
func (tc *TrackCreate) SetImgLargeURL(s string) *TrackCreate {
	tc.mutation.SetImgLargeURL(s)
	return tc
}

// SetNillableImgLargeURL sets the "img_large_url" field if the given value is not nil.
func (tc *TrackCreate) SetNillableImgLargeURL(s *string) *TrackCreate {
	if s != nil {
		tc.SetImgLargeURL(*s)
	}
	return tc
}

// SetReleaseDate sets the "release_date" field.
func (tc *TrackCreate) SetReleaseDate(t time.Time) *TrackCreate {
	tc.mutation.SetReleaseDate(t)
	return tc
}

// SetSpotifyID sets the "spotify_id" field.
func (tc *TrackCreate) SetSpotifyID(s string) *TrackCreate {
	tc.mutation.SetSpotifyID(s)
	return tc
}

// SetDurationMs sets the "duration_ms" field.
func (tc *TrackCreate) SetDurationMs(i int) *TrackCreate {
	tc.mutation.SetDurationMs(i)
	return tc
}

// SetPreviewURL sets the "preview_url" field.
func (tc *TrackCreate) SetPreviewURL(s string) *TrackCreate {
	tc.mutation.SetPreviewURL(s)
	return tc
}

// SetNillablePreviewURL sets the "preview_url" field if the given value is not nil.
func (tc *TrackCreate) SetNillablePreviewURL(s *string) *TrackCreate {
	if s != nil {
		tc.SetPreviewURL(*s)
	}
	return tc
}

// SetPopularity sets the "popularity" field.
func (tc *TrackCreate) SetPopularity(i int) *TrackCreate {
	tc.mutation.SetPopularity(i)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TrackCreate) SetCreatedAt(t time.Time) *TrackCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TrackCreate) SetNillableCreatedAt(t *time.Time) *TrackCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TrackCreate) SetUpdatedAt(t time.Time) *TrackCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TrackCreate) SetNillableUpdatedAt(t *time.Time) *TrackCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TrackCreate) SetDeletedAt(t time.Time) *TrackCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TrackCreate) SetNillableDeletedAt(t *time.Time) *TrackCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// AddPlaylistIDs adds the "playlists" edge to the Playlist entity by IDs.
func (tc *TrackCreate) AddPlaylistIDs(ids ...int) *TrackCreate {
	tc.mutation.AddPlaylistIDs(ids...)
	return tc
}

// AddPlaylists adds the "playlists" edges to the Playlist entity.
func (tc *TrackCreate) AddPlaylists(p ...*Playlist) *TrackCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tc.AddPlaylistIDs(ids...)
}

// Mutation returns the TrackMutation object of the builder.
func (tc *TrackCreate) Mutation() *TrackMutation {
	return tc.mutation
}

// Save creates the Track in the database.
func (tc *TrackCreate) Save(ctx context.Context) (*Track, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TrackCreate) SaveX(ctx context.Context) *Track {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TrackCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TrackCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TrackCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := track.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := track.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TrackCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Track.name"`)}
	}
	if _, ok := tc.mutation.Artist(); !ok {
		return &ValidationError{Name: "artist", err: errors.New(`ent: missing required field "Track.artist"`)}
	}
	if _, ok := tc.mutation.ReleaseDate(); !ok {
		return &ValidationError{Name: "release_date", err: errors.New(`ent: missing required field "Track.release_date"`)}
	}
	if _, ok := tc.mutation.SpotifyID(); !ok {
		return &ValidationError{Name: "spotify_id", err: errors.New(`ent: missing required field "Track.spotify_id"`)}
	}
	if _, ok := tc.mutation.DurationMs(); !ok {
		return &ValidationError{Name: "duration_ms", err: errors.New(`ent: missing required field "Track.duration_ms"`)}
	}
	if v, ok := tc.mutation.DurationMs(); ok {
		if err := track.DurationMsValidator(v); err != nil {
			return &ValidationError{Name: "duration_ms", err: fmt.Errorf(`ent: validator failed for field "Track.duration_ms": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Popularity(); !ok {
		return &ValidationError{Name: "popularity", err: errors.New(`ent: missing required field "Track.popularity"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Track.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Track.updated_at"`)}
	}
	return nil
}

func (tc *TrackCreate) sqlSave(ctx context.Context) (*Track, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TrackCreate) createSpec() (*Track, *sqlgraph.CreateSpec) {
	var (
		_node = &Track{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(track.Table, sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(track.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Artist(); ok {
		_spec.SetField(track.FieldArtist, field.TypeString, value)
		_node.Artist = value
	}
	if value, ok := tc.mutation.ImgSmallURL(); ok {
		_spec.SetField(track.FieldImgSmallURL, field.TypeString, value)
		_node.ImgSmallURL = &value
	}
	if value, ok := tc.mutation.ImgMediumURL(); ok {
		_spec.SetField(track.FieldImgMediumURL, field.TypeString, value)
		_node.ImgMediumURL = &value
	}
	if value, ok := tc.mutation.ImgLargeURL(); ok {
		_spec.SetField(track.FieldImgLargeURL, field.TypeString, value)
		_node.ImgLargeURL = &value
	}
	if value, ok := tc.mutation.ReleaseDate(); ok {
		_spec.SetField(track.FieldReleaseDate, field.TypeTime, value)
		_node.ReleaseDate = value
	}
	if value, ok := tc.mutation.SpotifyID(); ok {
		_spec.SetField(track.FieldSpotifyID, field.TypeString, value)
		_node.SpotifyID = value
	}
	if value, ok := tc.mutation.DurationMs(); ok {
		_spec.SetField(track.FieldDurationMs, field.TypeInt, value)
		_node.DurationMs = value
	}
	if value, ok := tc.mutation.PreviewURL(); ok {
		_spec.SetField(track.FieldPreviewURL, field.TypeString, value)
		_node.PreviewURL = &value
	}
	if value, ok := tc.mutation.Popularity(); ok {
		_spec.SetField(track.FieldPopularity, field.TypeInt, value)
		_node.Popularity = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(track.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(track.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(track.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := tc.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.PlaylistsTable,
			Columns: track.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Track.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrackUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tc *TrackCreate) OnConflict(opts ...sql.ConflictOption) *TrackUpsertOne {
	tc.conflict = opts
	return &TrackUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Track.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TrackCreate) OnConflictColumns(columns ...string) *TrackUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TrackUpsertOne{
		create: tc,
	}
}

type (
	// TrackUpsertOne is the builder for "upsert"-ing
	//  one Track node.
	TrackUpsertOne struct {
		create *TrackCreate
	}

	// TrackUpsert is the "OnConflict" setter.
	TrackUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TrackUpsert) SetName(v string) *TrackUpsert {
	u.Set(track.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TrackUpsert) UpdateName() *TrackUpsert {
	u.SetExcluded(track.FieldName)
	return u
}

// SetArtist sets the "artist" field.
func (u *TrackUpsert) SetArtist(v string) *TrackUpsert {
	u.Set(track.FieldArtist, v)
	return u
}

// UpdateArtist sets the "artist" field to the value that was provided on create.
func (u *TrackUpsert) UpdateArtist() *TrackUpsert {
	u.SetExcluded(track.FieldArtist)
	return u
}

// SetImgSmallURL sets the "img_small_url" field.
func (u *TrackUpsert) SetImgSmallURL(v string) *TrackUpsert {
	u.Set(track.FieldImgSmallURL, v)
	return u
}

// UpdateImgSmallURL sets the "img_small_url" field to the value that was provided on create.
func (u *TrackUpsert) UpdateImgSmallURL() *TrackUpsert {
	u.SetExcluded(track.FieldImgSmallURL)
	return u
}

// ClearImgSmallURL clears the value of the "img_small_url" field.
func (u *TrackUpsert) ClearImgSmallURL() *TrackUpsert {
	u.SetNull(track.FieldImgSmallURL)
	return u
}

// SetImgMediumURL sets the "img_medium_url" field.
func (u *TrackUpsert) SetImgMediumURL(v string) *TrackUpsert {
	u.Set(track.FieldImgMediumURL, v)
	return u
}

// UpdateImgMediumURL sets the "img_medium_url" field to the value that was provided on create.
func (u *TrackUpsert) UpdateImgMediumURL() *TrackUpsert {
	u.SetExcluded(track.FieldImgMediumURL)
	return u
}

// ClearImgMediumURL clears the value of the "img_medium_url" field.
func (u *TrackUpsert) ClearImgMediumURL() *TrackUpsert {
	u.SetNull(track.FieldImgMediumURL)
	return u
}

// SetImgLargeURL sets the "img_large_url" field.
func (u *TrackUpsert) SetImgLargeURL(v string) *TrackUpsert {
	u.Set(track.FieldImgLargeURL, v)
	return u
}

// UpdateImgLargeURL sets the "img_large_url" field to the value that was provided on create.
func (u *TrackUpsert) UpdateImgLargeURL() *TrackUpsert {
	u.SetExcluded(track.FieldImgLargeURL)
	return u
}

// ClearImgLargeURL clears the value of the "img_large_url" field.
func (u *TrackUpsert) ClearImgLargeURL() *TrackUpsert {
	u.SetNull(track.FieldImgLargeURL)
	return u
}

// SetReleaseDate sets the "release_date" field.
func (u *TrackUpsert) SetReleaseDate(v time.Time) *TrackUpsert {
	u.Set(track.FieldReleaseDate, v)
	return u
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *TrackUpsert) UpdateReleaseDate() *TrackUpsert {
	u.SetExcluded(track.FieldReleaseDate)
	return u
}

// SetDurationMs sets the "duration_ms" field.
func (u *TrackUpsert) SetDurationMs(v int) *TrackUpsert {
	u.Set(track.FieldDurationMs, v)
	return u
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *TrackUpsert) UpdateDurationMs() *TrackUpsert {
	u.SetExcluded(track.FieldDurationMs)
	return u
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *TrackUpsert) AddDurationMs(v int) *TrackUpsert {
	u.Add(track.FieldDurationMs, v)
	return u
}

// SetPreviewURL sets the "preview_url" field.
func (u *TrackUpsert) SetPreviewURL(v string) *TrackUpsert {
	u.Set(track.FieldPreviewURL, v)
	return u
}

// UpdatePreviewURL sets the "preview_url" field to the value that was provided on create.
func (u *TrackUpsert) UpdatePreviewURL() *TrackUpsert {
	u.SetExcluded(track.FieldPreviewURL)
	return u
}

// ClearPreviewURL clears the value of the "preview_url" field.
func (u *TrackUpsert) ClearPreviewURL() *TrackUpsert {
	u.SetNull(track.FieldPreviewURL)
	return u
}

// SetPopularity sets the "popularity" field.
func (u *TrackUpsert) SetPopularity(v int) *TrackUpsert {
	u.Set(track.FieldPopularity, v)
	return u
}

// UpdatePopularity sets the "popularity" field to the value that was provided on create.
func (u *TrackUpsert) UpdatePopularity() *TrackUpsert {
	u.SetExcluded(track.FieldPopularity)
	return u
}

// AddPopularity adds v to the "popularity" field.
func (u *TrackUpsert) AddPopularity(v int) *TrackUpsert {
	u.Add(track.FieldPopularity, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TrackUpsert) SetUpdatedAt(v time.Time) *TrackUpsert {
	u.Set(track.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrackUpsert) UpdateUpdatedAt() *TrackUpsert {
	u.SetExcluded(track.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TrackUpsert) SetDeletedAt(v time.Time) *TrackUpsert {
	u.Set(track.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TrackUpsert) UpdateDeletedAt() *TrackUpsert {
	u.SetExcluded(track.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TrackUpsert) ClearDeletedAt() *TrackUpsert {
	u.SetNull(track.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Track.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TrackUpsertOne) UpdateNewValues() *TrackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.SpotifyID(); exists {
			s.SetIgnore(track.FieldSpotifyID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(track.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Track.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TrackUpsertOne) Ignore() *TrackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrackUpsertOne) DoNothing() *TrackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrackCreate.OnConflict
// documentation for more info.
func (u *TrackUpsertOne) Update(set func(*TrackUpsert)) *TrackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrackUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TrackUpsertOne) SetName(v string) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateName() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateName()
	})
}

// SetArtist sets the "artist" field.
func (u *TrackUpsertOne) SetArtist(v string) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetArtist(v)
	})
}

// UpdateArtist sets the "artist" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateArtist() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateArtist()
	})
}

// SetImgSmallURL sets the "img_small_url" field.
func (u *TrackUpsertOne) SetImgSmallURL(v string) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetImgSmallURL(v)
	})
}

// UpdateImgSmallURL sets the "img_small_url" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateImgSmallURL() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateImgSmallURL()
	})
}

// ClearImgSmallURL clears the value of the "img_small_url" field.
func (u *TrackUpsertOne) ClearImgSmallURL() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.ClearImgSmallURL()
	})
}

// SetImgMediumURL sets the "img_medium_url" field.
func (u *TrackUpsertOne) SetImgMediumURL(v string) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetImgMediumURL(v)
	})
}

// UpdateImgMediumURL sets the "img_medium_url" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateImgMediumURL() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateImgMediumURL()
	})
}

// ClearImgMediumURL clears the value of the "img_medium_url" field.
func (u *TrackUpsertOne) ClearImgMediumURL() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.ClearImgMediumURL()
	})
}

// SetImgLargeURL sets the "img_large_url" field.
func (u *TrackUpsertOne) SetImgLargeURL(v string) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetImgLargeURL(v)
	})
}

// UpdateImgLargeURL sets the "img_large_url" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateImgLargeURL() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateImgLargeURL()
	})
}

// ClearImgLargeURL clears the value of the "img_large_url" field.
func (u *TrackUpsertOne) ClearImgLargeURL() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.ClearImgLargeURL()
	})
}

// SetReleaseDate sets the "release_date" field.
func (u *TrackUpsertOne) SetReleaseDate(v time.Time) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetReleaseDate(v)
	})
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateReleaseDate() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateReleaseDate()
	})
}

// SetDurationMs sets the "duration_ms" field.
func (u *TrackUpsertOne) SetDurationMs(v int) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetDurationMs(v)
	})
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *TrackUpsertOne) AddDurationMs(v int) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.AddDurationMs(v)
	})
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateDurationMs() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateDurationMs()
	})
}

// SetPreviewURL sets the "preview_url" field.
func (u *TrackUpsertOne) SetPreviewURL(v string) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetPreviewURL(v)
	})
}

// UpdatePreviewURL sets the "preview_url" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdatePreviewURL() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdatePreviewURL()
	})
}

// ClearPreviewURL clears the value of the "preview_url" field.
func (u *TrackUpsertOne) ClearPreviewURL() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.ClearPreviewURL()
	})
}

// SetPopularity sets the "popularity" field.
func (u *TrackUpsertOne) SetPopularity(v int) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetPopularity(v)
	})
}

// AddPopularity adds v to the "popularity" field.
func (u *TrackUpsertOne) AddPopularity(v int) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.AddPopularity(v)
	})
}

// UpdatePopularity sets the "popularity" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdatePopularity() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdatePopularity()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TrackUpsertOne) SetUpdatedAt(v time.Time) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateUpdatedAt() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TrackUpsertOne) SetDeletedAt(v time.Time) *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TrackUpsertOne) UpdateDeletedAt() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TrackUpsertOne) ClearDeletedAt() *TrackUpsertOne {
	return u.Update(func(s *TrackUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TrackUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrackCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrackUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TrackUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TrackUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TrackCreateBulk is the builder for creating many Track entities in bulk.
type TrackCreateBulk struct {
	config
	err      error
	builders []*TrackCreate
	conflict []sql.ConflictOption
}

// Save creates the Track entities in the database.
func (tcb *TrackCreateBulk) Save(ctx context.Context) ([]*Track, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Track, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TrackCreateBulk) SaveX(ctx context.Context) []*Track {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TrackCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TrackCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Track.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TrackUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tcb *TrackCreateBulk) OnConflict(opts ...sql.ConflictOption) *TrackUpsertBulk {
	tcb.conflict = opts
	return &TrackUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Track.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TrackCreateBulk) OnConflictColumns(columns ...string) *TrackUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TrackUpsertBulk{
		create: tcb,
	}
}

// TrackUpsertBulk is the builder for "upsert"-ing
// a bulk of Track nodes.
type TrackUpsertBulk struct {
	create *TrackCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Track.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TrackUpsertBulk) UpdateNewValues() *TrackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.SpotifyID(); exists {
				s.SetIgnore(track.FieldSpotifyID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(track.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Track.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TrackUpsertBulk) Ignore() *TrackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TrackUpsertBulk) DoNothing() *TrackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TrackCreateBulk.OnConflict
// documentation for more info.
func (u *TrackUpsertBulk) Update(set func(*TrackUpsert)) *TrackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TrackUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TrackUpsertBulk) SetName(v string) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateName() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateName()
	})
}

// SetArtist sets the "artist" field.
func (u *TrackUpsertBulk) SetArtist(v string) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetArtist(v)
	})
}

// UpdateArtist sets the "artist" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateArtist() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateArtist()
	})
}

// SetImgSmallURL sets the "img_small_url" field.
func (u *TrackUpsertBulk) SetImgSmallURL(v string) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetImgSmallURL(v)
	})
}

// UpdateImgSmallURL sets the "img_small_url" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateImgSmallURL() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateImgSmallURL()
	})
}

// ClearImgSmallURL clears the value of the "img_small_url" field.
func (u *TrackUpsertBulk) ClearImgSmallURL() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.ClearImgSmallURL()
	})
}

// SetImgMediumURL sets the "img_medium_url" field.
func (u *TrackUpsertBulk) SetImgMediumURL(v string) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetImgMediumURL(v)
	})
}

// UpdateImgMediumURL sets the "img_medium_url" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateImgMediumURL() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateImgMediumURL()
	})
}

// ClearImgMediumURL clears the value of the "img_medium_url" field.
func (u *TrackUpsertBulk) ClearImgMediumURL() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.ClearImgMediumURL()
	})
}

// SetImgLargeURL sets the "img_large_url" field.
func (u *TrackUpsertBulk) SetImgLargeURL(v string) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetImgLargeURL(v)
	})
}

// UpdateImgLargeURL sets the "img_large_url" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateImgLargeURL() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateImgLargeURL()
	})
}

// ClearImgLargeURL clears the value of the "img_large_url" field.
func (u *TrackUpsertBulk) ClearImgLargeURL() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.ClearImgLargeURL()
	})
}

// SetReleaseDate sets the "release_date" field.
func (u *TrackUpsertBulk) SetReleaseDate(v time.Time) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetReleaseDate(v)
	})
}

// UpdateReleaseDate sets the "release_date" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateReleaseDate() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateReleaseDate()
	})
}

// SetDurationMs sets the "duration_ms" field.
func (u *TrackUpsertBulk) SetDurationMs(v int) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetDurationMs(v)
	})
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *TrackUpsertBulk) AddDurationMs(v int) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.AddDurationMs(v)
	})
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateDurationMs() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateDurationMs()
	})
}

// SetPreviewURL sets the "preview_url" field.
func (u *TrackUpsertBulk) SetPreviewURL(v string) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetPreviewURL(v)
	})
}

// UpdatePreviewURL sets the "preview_url" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdatePreviewURL() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdatePreviewURL()
	})
}

// ClearPreviewURL clears the value of the "preview_url" field.
func (u *TrackUpsertBulk) ClearPreviewURL() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.ClearPreviewURL()
	})
}

// SetPopularity sets the "popularity" field.
func (u *TrackUpsertBulk) SetPopularity(v int) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetPopularity(v)
	})
}

// AddPopularity adds v to the "popularity" field.
func (u *TrackUpsertBulk) AddPopularity(v int) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.AddPopularity(v)
	})
}

// UpdatePopularity sets the "popularity" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdatePopularity() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdatePopularity()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TrackUpsertBulk) SetUpdatedAt(v time.Time) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateUpdatedAt() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TrackUpsertBulk) SetDeletedAt(v time.Time) *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TrackUpsertBulk) UpdateDeletedAt() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TrackUpsertBulk) ClearDeletedAt() *TrackUpsertBulk {
	return u.Update(func(s *TrackUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TrackUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TrackCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TrackCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TrackUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
