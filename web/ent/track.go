// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pineapple217/Sortify/web/ent/track"
)

// Track is the model entity for the Track schema.
type Track struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Artist holds the value of the "artist" field.
	Artist string `json:"artist,omitempty"`
	// ImgSmallURL holds the value of the "img_small_url" field.
	ImgSmallURL *string `json:"img_small_url,omitempty"`
	// ImgMediumURL holds the value of the "img_medium_url" field.
	ImgMediumURL *string `json:"img_medium_url,omitempty"`
	// ImgLargeURL holds the value of the "img_large_url" field.
	ImgLargeURL *string `json:"img_large_url,omitempty"`
	// ReleaseDate holds the value of the "release_date" field.
	ReleaseDate time.Time `json:"release_date,omitempty"`
	// SpotifyID holds the value of the "spotify_id" field.
	SpotifyID string `json:"spotify_id,omitempty"`
	// DurationMs holds the value of the "duration_ms" field.
	DurationMs int `json:"duration_ms,omitempty"`
	// PreviewURL holds the value of the "preview_url" field.
	PreviewURL *string `json:"preview_url,omitempty"`
	// Popularity holds the value of the "popularity" field.
	Popularity int `json:"popularity,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrackQuery when eager-loading is set.
	Edges        TrackEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrackEdges holds the relations/edges for other nodes in the graph.
type TrackEdges struct {
	// Playlists holds the value of the playlists edge.
	Playlists []*Playlist `json:"playlists,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlaylistsOrErr returns the Playlists value or an error if the edge
// was not loaded in eager-loading.
func (e TrackEdges) PlaylistsOrErr() ([]*Playlist, error) {
	if e.loadedTypes[0] {
		return e.Playlists, nil
	}
	return nil, &NotLoadedError{edge: "playlists"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Track) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case track.FieldID, track.FieldDurationMs, track.FieldPopularity:
			values[i] = new(sql.NullInt64)
		case track.FieldName, track.FieldArtist, track.FieldImgSmallURL, track.FieldImgMediumURL, track.FieldImgLargeURL, track.FieldSpotifyID, track.FieldPreviewURL:
			values[i] = new(sql.NullString)
		case track.FieldReleaseDate, track.FieldCreatedAt, track.FieldUpdatedAt, track.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Track fields.
func (t *Track) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case track.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case track.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case track.FieldArtist:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artist", values[i])
			} else if value.Valid {
				t.Artist = value.String
			}
		case track.FieldImgSmallURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_small_url", values[i])
			} else if value.Valid {
				t.ImgSmallURL = new(string)
				*t.ImgSmallURL = value.String
			}
		case track.FieldImgMediumURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_medium_url", values[i])
			} else if value.Valid {
				t.ImgMediumURL = new(string)
				*t.ImgMediumURL = value.String
			}
		case track.FieldImgLargeURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_large_url", values[i])
			} else if value.Valid {
				t.ImgLargeURL = new(string)
				*t.ImgLargeURL = value.String
			}
		case track.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field release_date", values[i])
			} else if value.Valid {
				t.ReleaseDate = value.Time
			}
		case track.FieldSpotifyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spotify_id", values[i])
			} else if value.Valid {
				t.SpotifyID = value.String
			}
		case track.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				t.DurationMs = int(value.Int64)
			}
		case track.FieldPreviewURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preview_url", values[i])
			} else if value.Valid {
				t.PreviewURL = new(string)
				*t.PreviewURL = value.String
			}
		case track.FieldPopularity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field popularity", values[i])
			} else if value.Valid {
				t.Popularity = int(value.Int64)
			}
		case track.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case track.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case track.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = new(time.Time)
				*t.DeletedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Track.
// This includes values selected through modifiers, order, etc.
func (t *Track) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryPlaylists queries the "playlists" edge of the Track entity.
func (t *Track) QueryPlaylists() *PlaylistQuery {
	return NewTrackClient(t.config).QueryPlaylists(t)
}

// Update returns a builder for updating this Track.
// Note that you need to call Track.Unwrap() before calling this method if this Track
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Track) Update() *TrackUpdateOne {
	return NewTrackClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Track entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Track) Unwrap() *Track {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Track is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Track) String() string {
	var builder strings.Builder
	builder.WriteString("Track(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("artist=")
	builder.WriteString(t.Artist)
	builder.WriteString(", ")
	if v := t.ImgSmallURL; v != nil {
		builder.WriteString("img_small_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.ImgMediumURL; v != nil {
		builder.WriteString("img_medium_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.ImgLargeURL; v != nil {
		builder.WriteString("img_large_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("release_date=")
	builder.WriteString(t.ReleaseDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("spotify_id=")
	builder.WriteString(t.SpotifyID)
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", t.DurationMs))
	builder.WriteString(", ")
	if v := t.PreviewURL; v != nil {
		builder.WriteString("preview_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("popularity=")
	builder.WriteString(fmt.Sprintf("%v", t.Popularity))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := t.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Tracks is a parsable slice of Track.
type Tracks []*Track
